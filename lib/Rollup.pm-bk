package Rollup;
use DBI;
use DBForm;
use myDBI;
use myConfig;
use Archive::Zip;
use CGI::Carp qw(fatalsToBrowser);
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
our $src = myConfig->cfg('SRC');
our $BIN = myConfig->cfg("BIN");
use Time::Piece;


# Create a new Archive::Zip object
my $zip = Archive::Zip->new();

############################################################################

sub add_to_zip {

  my ($self, $form, $folder_path, $CLPROVID) = @_;

  # Format the current timestamp
  my $timestamp = localtime->strftime("%Y-%m-%dT%H_%M_%S");

  # Define the name for the output zip file
  my $output_zip = "${CLPROVID}_RollUP_${timestamp}.zip";

  # Create a new Archive::Zip object
  my $zip = Archive::Zip->new();

  # Open the directory and add PDF files to the zip archive
  opendir(my $dir, $folder_path) or die "Cannot open directory: $!";
  while (my $file = readdir($dir)) {
	  next unless $file =~ /\.(pdf|xls|xlsx|xdp)$/i;  # Only include PDF files
	  my $file_path = "$folder_path/$file";
	  $zip->addFile($file_path, $file) or die "Error adding $file to the archive: $!";
  }
  closedir($dir);

  # Save the zip archive to a file
  unless ($zip->writeToFileNamed("$folder_path/$output_zip") == AZ_OK) {
	  die "Error creating zip archive: $!";
  }

}
sub Notes
{
  my ($self,$form,$ClientID,$ProvID) = @_;
  my $dbh = myDBI->dbconnect($form->{'DBNAME'});
# THIS LOOP IS TO REMOVE THE 'OLD' NAMED FILES...
  for (my $j = 1; $j <= 5; $j++)
  {
	my $NoteDef = DBA->noteNum($j);
#warn qq|rollupNotes: ClientID=${ClientID}, ProvID=${ProvID}, j=$j, NoteDef=$NoteDef\n|;
	my $HomePath = $ProvID ? qq|/Provider/EDocs/${ProvID}| : qq|/Client/EDocs/${ClientID}|;
	my $RootPath = $form->{DOCROOT} . ${HomePath};
	my $FileName = $ProvID ? qq|${NoteDef}Notes${ProvID}.xdp| : qq|${NoteDef}Notes${ClientID}.xdp|;
	my $HomeName = ${HomePath} . '/' . ${FileName};
	my $RootName = ${RootPath} . '/' . ${FileName};
print qq|rollupNotes: HomeName=${HomeName}\n|;
print qq|rollupNotes: RootName=${RootName}\n|;
# first delete them.
	unlink($RootName);
	if ( $ProvID )
	{
	  my $sDelete = $dbh->prepare("delete from ProviderEDocs where ProvID=? and Rollup=?");
	  $sDelete->execute($ProvID,$FileName);
	  $sDelete->finish();
	}
	else
	{
	  my $sDelete = $dbh->prepare("delete from ClientEDocs where ClientID=? and Rollup=?");
	  $sDelete->execute($ClientID,$FileName);
	  $sDelete->finish();
	}
  }

  my $ZipPath = $ProvID ? qq|/Provider/EDocs/${ProvID}| : qq|/Client/EDocs/${ClientID}|;
  my $ZipPath = $form->{DOCROOT} . $ZipPath;

  my $HomePath = $ProvID ? qq|/Provider/EDocs/${ProvID}| : qq|/Client/EDocs/${ClientID}|;
  my $RootPath = $form->{DOCROOT} . ${HomePath};
  my $FileName = $ProvID ? qq|Notes${ProvID}.pdf| : qq|Notes${ClientID}.pdf|;
  my $HomeName = ${HomePath} . '/' . ${FileName};
  my $RootName = ${RootPath} . '/' . ${FileName};
#warn qq|rollupNotes: HomeName=${HomeName}\n|;
#warn qq|rollupNotes: RootName=${RootName}\n|;
# first delete them.
  unlink($RootName);
  if ( $ProvID )
  {
	my $sDelete = $dbh->prepare("delete from ProviderEDocs where ProvID=? and Rollup=?");
	$sDelete->execute($ProvID,$FileName);
	$sDelete->finish();
  }
  else
  {
	my $sDelete = $dbh->prepare("delete from ClientEDocs where ClientID=? and Rollup=?");
	$sDelete->execute($ClientID,$FileName);
	$sDelete->finish();
  }

  my $TrIDs='';
  my $with = $ProvID ? qq|ProvID='${ProvID}'| : qq|ClientID='${ClientID}'|;
  my $qNotes = qq|select TrID from Treatment where ${with} order by ClientID,ContLogDate,ContLogBegTime,ContLogEndTime|;
#warn "rollupNotes: qNotes=\n$qNotes\n";
  $sNotes=$dbh->prepare($qNotes);
  $sNotes->execute();
  while ( my ($TrID) = $sNotes->fetchrow_array ) { $TrIDs .= qq|${TrID} |; }
  unless ( $TrIDs eq '' )
  {
	my $cmd = qq|/var/www/okmis/src/cgi/bin/printNotes.pl DBNAME=$form->{'DBNAME'}\\&TrIDs=${TrIDs}\\&mlt=$form->{mlt}\\&file=${RootName}|;
#warn qq|Notes: cmd:${cmd}\n|;
	system("${cmd}");
#warn qq|rollupNotes: create: ${RootName}\n|;
	my $rEDocs = ();
	my $table = qq|ClientEDocs|;
	my $where = qq|ClientID='${ClientID}' and Rollup='${FileName}'|;
	if ( $ProvID )
	{
	  $rEDocs->{ProvID} = $ProvID; 
	  $table = qq|ProviderEDocs|;
	  $where = qq|ProvID='${ProvID}' and Rollup='${FileName}'|;
	}
	else { $rEDocs->{ClientID} = $ClientID; }
#warn qq|rollupNotes: table: ${table}\n|;
#warn qq|rollupNotes: where: ${where}\n|;
	my $TODAY = DBUtil->Date($form->{TODAY},'fmt','MM/DD/YYYY');
	my $Title = $ProvID ? qq|Rollup provider '${ProvID}' ProviderNotes: ${TODAY}|
						: qq|Rollup client '${ClientID}' ClientNotes: ${TODAY}|;
	$rEDocs->{Title} = $Title;
	$rEDocs->{Descr} = qq|Rollup on ${TODAY}|;
	$rEDocs->{Type} = '22';                       # 'Client' Type.
	$rEDocs->{Path} = $HomeName;                  # sql Path from Home Directory
	$rEDocs->{Rollup} = $FileName;
	$rEDocs->{CreateDate} = $form->{TODAY};       # last time created.
	$rEDocs->{CreateProvID} = $form->{LOGINPROVID};
	$rEDocs->{ChangeProvID} = $form->{LOGINPROVID};
#foreach my $f ( sort keys %{$rEDocs} ) { warn ": rEDocs-$f=$rEDocs->{$f}\n"; }
	my $UPDID = DBA->doUpdate($form,$table,$rEDocs,$where);

  }
  $self->add_to_zip($form, $ZipPath, "$ClientID$ProvID");

  $sNotes->finish();
  return($TrIDs);
}
############################################################################
sub edocs
{
  my ($self,$form,$ClientID,$Table,$Legacy) = @_;
#warn qq|edocs: ClientID=${ClientID}, Table=${Table}, Legacy=${Legacy}\n|;
  my $dbh = myDBI->dbconnect($form->{'DBNAME'});
  my $HomePath = qq|/Client/EDocs/${ClientID}|;
  my $RootPath = $form->{DOCROOT} . ${HomePath};
  my $TODAY = DBUtil->Date($form->{TODAY},'fmt','MM/DD/YYYY');
  my $Title = qq|Rollup client '${ClientID}' ${Table}: ${TODAY}|;
  my $Descr = qq|Rollup on ${TODAY}|;
  my $EType = 22;        # 'Client' Type.
  my $RECID = myDBI->getTableConfig($Table,'RECID');
  my $FileName = qq|${Table}${ClientID}.pdf|;
  my $PrintRoutine = 'print'.$Table;
#warn qq|rollupNotes: FileName=${FileName}\n|;
#warn qq|rollupNotes: PrintRoutine=${PrintRoutine}\n|;
  my $HomeName = ${HomePath} . '/' . ${FileName};
  my $RootName = ${RootPath} . '/' . ${FileName};
#warn qq|rollupNotes: HomeName=${HomeName}\n|;
#warn qq|rollupNotes: RootName=${RootName}\n|;
#warn qq|rollupNotes: OLDRootName=${OLDRootName}\n|;
# first delete them.
  unlink($RootName);
  (my $OLDRootName = $RootName) =~ s/pdf/xdp/g;
  unlink($OLDRootName);
  my $sDelete = $dbh->prepare("delete from ClientEDocs where ClientID=? and Rollup=?");
  $sDelete->execute($ClientID,$FileName);
  (my $OLDFileName = $FileName) =~ s/pdf/xdp/g;
  $sDelete->execute($ClientID,$OLDFileName);
  $sDelete->finish();
  my $order = $Table eq 'ClientDischarge' ? 'ClientDischargeCDC.TransDate'
			: $Table eq 'ClientAdmit' ? 'ClientAdmit.AdmitDate'
			: $Table eq 'ClientPrAuth' ? 'ClientPrAuth.EffDate'
			: $Table eq 'ClientTrPlan' ? 'ClientTrPlan.EffDate'
			: $Table eq 'ClientLabs' ? 'ClientLabs.ChangeDate'
			: $Table eq 'ClientCARSReview' ? 'ClientCARSReview.ChangeDate'
			: $Table eq 'ClientEDocs' ? 'ClientEDocs.CreateDate'
			: $Table eq 'PDMed' ? 'PDMed.StartDate'
			: $Table eq 'ClientRiskAssessment' ? 'ClientRiskAssessment.VisitDate'
			
			: $Table eq 'ClientPHQ' ? 'ClientPHQ.CreateDate'
			: $Table eq 'ClientPHQ15' ? 'ClientPHQ15.CreateDate'
			: $Table eq 'ClientPHQ2' ? 'ClientPHQ2.CreateDate'
			: $Table eq 'ClientPHQ4' ? 'ClientPHQ4.CreateDate'
			: $Table eq 'ClientPHQ9' ? 'ClientPHQ9.CreateDate'
			: $Table eq 'ClientTPHQ9' ? 'ClientTPHQ9.CreateDate'
			: $Table eq 'ClientPHQBrief' ? 'ClientPHQBrief.CreateDate'

			: $Table eq 'ClientACE' ? 'ClientACE.CreateDate'
			: $Table eq 'ClientGAD7' ? 'ClientGAD7.CreateDate'
			: $Table eq 'ClientBasis32' ? 'ClientBasis32.CreateDate'
			
			: $Table eq 'ClientPHQSADS' ? 'ClientPHQSADS.CreateDate'

			: $Table eq 'ClientTASI' ? 'ClientTASI.CreateDate'
			
			: $Table eq 'ClientASI' ? 'ClientASI.CreateDate'

			: $Table eq 'ClientASAM' ? 'ClientASAM.CreateDate'

			: $Table eq 'SOGS' ? 'SOGS.CreateDate'

			: $Table eq 'SOGSGSI' ? 'SOGSGSI.CreateDate'

			: $Table eq 'ClientMeds' ? 'ClientMeds.CreateDate'
			
			: return();
  my $join = $Table eq 'ClientDischarge'
		   ? "left join ClientDischargeCDC on ClientDischargeCDC.ClientDischargeID=ClientDischarge.ID"
		   : '';
  my $daterange = '';

  if (index($Table, 'PHQ') != -1  || $Table eq "ClientGAD7" || $Table eq "ClientACE") {
	$PrintRoutine = qq|printClientPHQ|;
  } 
  if ( $Table eq 'ClientAdmit' )
  {
	if ( $Legacy )      # could change to include ALL rollups with value of Legacy (see setClientRollup)
	{
	  $daterange = qq|and ClientAdmit.AdmitDate<='${Legacy}'|;
	  $FileName = qq|ClientIntake${ClientID}.xdp|;
	  $HomeName = ${HomePath} . '/' . ${FileName};
	  $RootName = ${RootPath} . '/' . ${FileName};
	  $PrintRoutine = qq|PrintClientIntakePre2017|;
	  $Title = qq|Rollup client '${ClientID}' ClientIntake: ${TODAY}|;
#warn "edocs: daterange=${daterange}, FileName=${FileName}, RootName=${RootName}, PrintRoutine=${PrintRoutine}\n";
	}
	else
	{
	  $daterange = qq|and ClientAdmit.AdmitDate>'2017-01-01'|;
	}
  }
  my $IDs='';
  my $q = qq|select ${Table}.${RECID} from ${Table} ${join} where ${Table}.ClientID=? ${daterange} order by ${order}|;
  if($Table eq "ClientASI") {
	$q = qq|select ${Table}.${RECID} from ${Table} ${join} where ${Table}.G1=? ${daterange} order by ${order}|;
  }
#warn "edocs: q=\n$q\nClientID=${ClientID}, Table=${Table}, PrintRoutine=${PrintRoutine}, RECID=${RECID}\n";
  my $s=$dbh->prepare($q);
  $s->execute($ClientID);
#my $rows = $s->rows; warn qq|edocs: rows=${rows}\n|;
  while ( my ($ID) = $s->fetchrow_array ) { $IDs .= qq|${ID} |; }
  unless ( $IDs eq '' )
  {
	my $cmd = qq|/var/www/okmis/src/cgi/bin/${PrintRoutine}.cgi DBNAME=$form->{'DBNAME'}\\&IDs=${IDs}\\&Client_ClientID=${ClientID}\\&mlt=$form->{mlt}\\&file=${RootName}\\&action=${Table}|;
#warn qq|edocs: cmd:${cmd}\n|;
	system("${cmd}");
	my $rEDocs = ();
	$rEDocs->{ClientID} = $ClientID;
	$rEDocs->{Title} = $Title;
	$rEDocs->{Descr} = $Descr;
	$rEDocs->{Type} = $EType;
	$rEDocs->{Path} = $HomeName;                  # sql Path from Home Directory
	$rEDocs->{Rollup} = $FileName;
	$rEDocs->{CreateDate} = $form->{TODAY};       # last time created.
	$rEDocs->{CreateProvID} = $form->{LOGINPROVID};
	$rEDocs->{ChangeProvID} = $form->{LOGINPROVID};
	my $UPDID = DBA->doUpdate($form,'ClientEDocs',$rEDocs,"ClientID='${ClientID}' and Rollup='${FileName}'");
#warn qq|edocs: UPDID:${UPDID}\n|;
  }
  $s->finish();
  return($IDs);
}


# @desc Rollup provider docs for a a given table
# @args $form, $ProvID, $Table
# @return $ids of the generated docs
sub ProviderEDocs {
  my ($self,$form,$ProvID,$Table) = @_;
  my $dbh = myDBI->dbconnect($form->{'DBNAME'});
  my $HomePath = qq|/Provider/EDocs/${ProvID}|;
  my $RootPath = $form->{DOCROOT} . ${HomePath};
  my $TODAY = DBUtil->Date($form->{TODAY},'fmt','MM/DD/YYYY');
  my $Title = qq|Rollup Provider '${ProvID}' ${Table}: ${TODAY}|;
  my $Descr = qq|Rollup on ${TODAY}|;
  my $EType = 27;        # 'Credentialing' Type.
  my $RECID = myDBI->getTableConfig($Table,'RECID');
  my $FileName = qq|${Table}${ProvID}.pdf|;
  my $PrintRoutine = 'print'.$Table;

  my $HomeName = ${HomePath} . '/' . ${FileName};
  my $RootName = ${RootPath} . '/' . ${FileName};


  unlink($RootName);
  (my $OLDRootName = $RootName) =~ s/pdf/xdp/g;
  unlink($OLDRootName);


  my $sDelete = $dbh->prepare("delete from ProviderEDocs where ProvID=? and Rollup=?");
  $sDelete->execute($ProvID,$FileName);
  (my $OLDFileName = $FileName) =~ s/pdf/xdp/g;
  $sDelete->execute($ProvID,$OLDFileName);
  $sDelete->finish();

  if($RECID eq '') {
	$RECID = 'ID';
  }
  if($Table eq "Treatment") {
	$RECID = 'TrID';
  }
  my $IDs='';
  my $q = qq|select ${Table}.${RECID} from ${Table} where ${Table}.ProvID=?|;

  if('Billing' eq $Table) {
	$q = qq|select ${Table}.${RECID} from ${Table} where ${Table}.ClinicID=?|;
	$PrintRoutine = 'printProviderBilling';
  }

  my $s=$dbh->prepare($q);
  $s->execute($ProvID);

  while ( my ($ID) = $s->fetchrow_array ) { $IDs .= qq|${ID} |; }

  unless ( $IDs eq '' )
  {
	my $cmd = qq|/var/www/okmis/src/cgi/bin/${PrintRoutine}.cgi DBNAME=$form->{'DBNAME'}\\&IDs=${IDs}\\&Provider_ProvID=${ProvID}\\&mlt=$form->{mlt}\\&file=${RootName}|;
		if($Table eq "Treatment") {
		$cmd = qq|/var/www/okmis/src/cgi/bin/printHCFA.pl DBNAME=$form->{'DBNAME'}\\&TrIDs=${IDs}\\&Provider_ProvID=${ProvID}\\&mlt=$form->{mlt}\\&file=${RootName}|;
	}
	#warn qq|edocs: cmd:${cmd}\n|;
	system("${cmd}");
	my $rEDocs = ();
	$rEDocs->{ProvID} = $ProvID;
	$rEDocs->{Title} = $Title;
	$rEDocs->{Descr} = $Descr;
	$rEDocs->{Type} = $EType;
	$rEDocs->{Path} = $HomeName;                  # sql Path from Home Directory
	$rEDocs->{Rollup} = $FileName;
	$rEDocs->{CreateDate} = $form->{TODAY};       # last time created.
	$rEDocs->{CreateProvID} = $form->{LOGINPROVID};
	$rEDocs->{ChangeProvID} = $form->{LOGINPROVID};
	my $UPDID = DBA->doUpdate($form,'ProviderEDocs',$rEDocs,"ProvID='${ProvID}' and Rollup='${FileName}'");
	  #warn qq|edocs: UPDID:${UPDID}\n|;
  }

 # my @commands = (
#	qq|/var/www/okmis/src/reports/BillAmt DBNAME=$form->{'DBNAME'}\\&Type=\\&hdrline=4\\&output=pdf\\&Active=\\&ClinicIDs=$ProvID\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=all\\&sYearMonth=\\&ReportDescr=Billed Report by Week > ${RootPath}/BillingRecAmt.pdf|,
#	qq|/var/www/okmis/src/reports/BillAmt DBNAME=$form->{'DBNAME'}\\&Type=\\&hdrline=4\\&output=ss\\&Active=\\&ClinicIDs=$ProvID\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=all\\&sYearMonth=\\&ReportDescr=Billed Report by Week > ${RootPath}/BillingRecAmt.xls|,
#	qq|/var/www/okmis/src/reports/noteReport DBNAME=$form->{'DBNAME'}\\&Type=BilledDate\\&hdrline=\\&output=ss\\&Active=\\&ClinicIDs=$ProvID\\&CustAgency=\\&Days=\\&Format=Extended\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=all\\&sYearMonth=\\&ReportDescr=Note Report for BILLED Date > ${RootPath}/Billing.xls|,
#	qq|/var/www/okmis/src/reports/ClientByClinic DBNAME=$form->{'DBNAME'}\\&ForProvID=$ProvID\\&Type=\\&hdrline=\\&output=ss\\&Active=\\&ClinicIDs=\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=\\&sYearMonth=\\&ReportDescr=Client By Clinic > ${RootPath}/Clients.xls|,
#	qq|/var/www/okmis/src/reports/ProvEmpl DBNAME=$form->{'DBNAME'}\\&ForProvID=$ProvID\\&Type=\\&hdrline=\\&output=ss\\&Active=\\&ClinicIDs=\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=\\&sYearMonth=\\&ReportDescr=Provider/Employee w/Lic+Cred > ${RootPath}/Providers.xls|      
  #);

 # foreach my $command (@commands) {
#	system("$command");
  #}
  $s->finish();
  return($IDs);
}


sub RollupFiles{
  my ($self,$form,$ProvID) = @_;
  my $HomePath = qq|/Provider/EDocs/${ProvID}|;
  my $RootPath = $form->{DOCROOT} . ${HomePath};
  my @commands = (
	qq|/var/www/okmis/src/reports/BillAmt mlt=$form->{mlt}\\&DBNAME=$form->{'DBNAME'}\\&Type=\\&hdrline=4\\&output=pdf\\&Active=\\&ClinicIDs=$ProvID\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=all\\&sYearMonth=\\&ReportDescr=Billed Report by Week 1> ${RootPath}/BillingRecAmt.pdf|,
	qq|/var/www/okmis/src/reports/BillAmt mlt=$form->{mlt}\\&DBNAME=$form->{'DBNAME'}\\&Type=\\&hdrline=4\\&output=ss\\&Active=\\&ClinicIDs=$ProvID\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=all\\&sYearMonth=\\&ReportDescr=Billed Report by Week 1> ${RootPath}/BillingRecAmt.xls|,
	qq|/var/www/okmis/src/reports/noteReport mlt=$form->{mlt}\\&DBNAME=$form->{'DBNAME'}\\&Type=BilledDate\\&hdrline=\\&output=ss\\&Active=\\&ClinicIDs=$ProvID\\&CustAgency=\\&Days=\\&Format=Extended\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=all\\&sYearMonth=\\&ReportDescr=Note Report for BILLED Date 1> ${RootPath}/Billing.xls|,
	qq|/var/www/okmis/src/reports/ClientByClinic mlt=$form->{mlt}\\&DBNAME=$form->{'DBNAME'}\\&ForProvID=$ProvID\\&Type=\\&hdrline=\\&output=ss\\&Active=\\&ClinicIDs=\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=\\&sYearMonth=\\&ReportDescr=Client By Clinic 1> ${RootPath}/Clients.xls|,
	qq|/var/www/okmis/src/reports/ProvEmpl mlt=$form->{mlt}\\&DBNAME=$form->{'DBNAME'}\\&ForProvID=$ProvID\\&Type=\\&hdrline=\\&output=ss\\&Active=\\&ClinicIDs=\\&CustAgency=\\&Days=\\&Format=\\&FromDate=\\&InsCode=\\&InsID=\\&ProvIDs=\\&ToDate=\\&daterange=\\&sYearMonth=\\&ReportDescr=Provider/Employee w/Lic+Cred 1> ${RootPath}/Providers.xls|      
  );
    
  foreach my $command (@commands) {
        system("$command");
  }
  return;
}

############################################################################
1;
