#!/usr/bin/perl
use lib 'C:/xampp/htdocs/src/lib';
use DBI;
use DBForm;
use DBA;

############################################################################
# usage: makexTABLE table Category
#        create xTABLE=table from xVALUESET
############################################################################
my $debug    = 0;
my $table    = shift;
my $Category = shift;
if ( !$table || !$Category ) {
    print
qq|\n\nusage: makexTABLE table Category\nERROR>> Missing table or Category!!\n\n|;
    exit;
}
my $form = DBForm->new("DBNAME=okmis_dev&mlt=BNpCTLI9e3tB");
if ($debug) {
    foreach my $f ( sort keys %{$form} ) { print ": form-$f=$form->{$f}\n"; }
}
my $dbh  = $form->dbconnect();
my $cdbh = $form->connectdb('okmis_config');
warn qq|table=${table}\n|;
warn qq|Category=${Category}\n|;

reCreate( $cdbh, $table );

my $sVALUESET = $cdbh->prepare(
    "select * from xVALUESET where Category=? group by Concept order by Concept"
);
$sVALUESET->execute($Category);
my $rows = $sVALUESET->rows;
print qq|## selected ${rows} for xVALUESET Category=${Category}=\n|;
while ( my $rVALUESET = $sVALUESET->fetchrow_hashref ) {
    if ($debug) {
        foreach my $f ( sort keys %{$rVALUESET} ) {
            print ": rVALUESET-$f=$rVALUESET->{$f}\n";
        }
    }
    my $r = {};
    $r->{'ID'} = $rVALUESET->{'CodeSystem'} . '_' . $rVALUESET->{'Concept'};
    $r->{'Category'}          = $rVALUESET->{'Category'};
    $r->{'SubCategory'}       = $rVALUESET->{'QualityDataElement'};
    $r->{'ConceptCode'}       = $rVALUESET->{'Concept'};
    $r->{'ConceptName'}       = $rVALUESET->{'ConceptDescription'};
    $r->{'CodeSystem'}        = $rVALUESET->{'CodeSystem'};
    $r->{'CodeSystemOID'}     = $rVALUESET->{'CodeSystemOID'};
    $r->{'CodeSystemVersion'} = $rVALUESET->{'CodeSystemVersion'};
    $r->{'ValueSetName'}      = $rVALUESET->{'ValueSetName'};
    $r->{'ValueSetOID'}       = $rVALUESET->{'ValueSetOID'};
    $r->{'ValueSetVersion'}   = $rVALUESET->{'ValueSetVersion'};
    $r->{'Active'}            = '1';   # as string, matching char(1)
    my $qInsert = DBA->genInsert( $form, $table, $r );
    print qq|insRecord: qInsert=${qInsert}\n| if ($debug);
    my $sInsert = $cdbh->prepare($qInsert);
    $sInsert->execute() || $form->dberror("INSERT ERROR: ${table}: ${qInsert}");
    my $RTNID = $sInsert->{'mysql_insertid'};
    $sInsert->finish();
    print qq|insRecord: ${table}: RTNID=${RTNID}\n| if ($debug);
}
$sVALUESET->finish();

$cdbh->disconnect();
$form->complete();
exit;
############################################################################
sub reCreate {
    my ( $dbh, $table ) = @_;
    # recreate table...
    my $sDrop = $dbh->prepare("DROP TABLE IF EXISTS ${table}");
    $sDrop->execute();
    $sDrop->finish();
    my $sCreate = $dbh->prepare( "
CREATE TABLE `${table}` (
  `ID` varchar(64) NOT NULL,
  `Category` varchar(100) NOT NULL DEFAULT '',
  `SubCategory` varchar(100) NOT NULL DEFAULT '',
  `ConceptCode` varchar(32) NOT NULL DEFAULT '',
  `ConceptName` varchar(200) NOT NULL DEFAULT '',
  `CodeSystem` varchar(32) NOT NULL DEFAULT '',
  `CodeSystemOID` varchar(32) NOT NULL DEFAULT '',
  `CodeSystemVersion` varchar(32) NOT NULL DEFAULT '',
  `ValueSetName` varchar(100) NOT NULL DEFAULT '',
  `ValueSetOID` varchar(64) NOT NULL DEFAULT '',
  `ValueSetVersion` varchar(32) NOT NULL DEFAULT '',
  `Active` char(1) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
" );
    $sCreate->execute();
    $sCreate->finish();
    return ();
}