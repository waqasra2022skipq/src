#!/usr/bin/perl
use lib '/var/www/okmis/src/lib';
use DBI;
use myForm;
use myDBI;
use Rollup;

############################################################################
# usage: updateSCRATES "DBNAME=db"
############################################################################

# get the command name...
my ( $pw, $cmd ) = $0 =~ m/(.*\/)(.*)$/;
print qq|#${cmd}: Started | . localtime() . qq|\n|;
my $form = myForm->new();
my $dbh  = myDBI->dbconnect( $form->{'DBNAME'} );

print qq|  Database Selected = $form->{'DBNAME'}...\n|;

# my $EB = $dbh->prepare("SELECT * FROM `Eligible` WHERE PlanDescr = 'SoonerSelect' and BenefitDescr = 'Primary Care Provider' GROUP BY ClientID");

# my $xInsurance = $dbh->prepare("SELECT * FROM xInsurance WHERE Name Like ?");
# my $sClInsurance = $dbh->prepare("SELECT * FROM Insurance WHERE InsID=? and ClientID=?");

# my $upd_cl_insurance = $dbh->prepare("Update Insurance SET Priority=2 WHERE ClientID=? and Priority=1 and InsID = '100'");
# my $upd_cl_insurance_2 = $dbh->prepare("Update Insurance SET Priority=1 WHERE ClientID=? and InsID=?");

# $EB->execute();

# while(my $rEB = $EB->fetchrow_hashref) {
#   my $ClientID = $rEB->{'ClientID'};
#   my $OtherInsName = $rEB->{'OtherInsName'};

#   print qq|  Eligible ClientID = ${ClientID}...\n|;

#   # Set OtherInsName to "Humana HEALTHY HORIZONS" if it matches the pattern
#   print qq|  Eligible OtherInsName = ${OtherInsName}...\n|;

#   if ($OtherInsName =~ /HUMANA HEALTHY HORIZONS/) {
#     $OtherInsName = "HUMANA HEALTHY HORIZONS";
#     print qq|  Using OtherInsName: $OtherInsName\n|;
#   }
#   $xInsurance->execute("%$OtherInsName%");

#   my $rInsurance = $xInsurance->fetchrow_hashref;
#   my $InsID = $rInsurance->{ID};

#   next if(!$InsID);

#   print qq|  rInsurance InsID = ${InsID}...\n|;

#   print qq|  Update Current Primary Insurance to Secondary\n|;
#   $upd_cl_insurance->execute($ClientID);

#   $sClInsurance->execute($InsID, $ClientID);
#   if(my $rClInsurance = $sClInsurance->fetchrow_hashref) {
#     print qq|  Set The MCO $OtherInsName as Primary Insurance\n|;

#     $upd_cl_insurance_2->execute($ClientID, $InsID);
#   }
# }

# # Finish all statement handles
# $EB->finish();
# $xInsurance->finish();
# $sClInsurance->finish();
# $upd_cl_insurance->finish();
# $upd_cl_insurance_2->finish();

# FIX Null Billdate for Notes that are reconcilled

# my $upd_cl_insurance = $dbh->prepare("UPDATE Treatment SET BillDate = PaidDate WHERE BillDate is NULL and BillStatus = 5");
# $upd_cl_insurance->execute();
# $upd_cl_insurance->finish();

# FIX Null Billdate for Notes that are reconcilled

# my $add_remarkCode = $dbh->prepare("ALTER TABLE `NoteTrans` ADD `RemarkCode` VARCHAR(5) NULL DEFAULT NULL AFTER `TransType`");
# $add_remarkCode->execute();
# $add_remarkCode->finish();

# $add_remarkCode = $dbh->prepare("ALTER TABLE `Treatment` ADD `RemarkCode` VARCHAR(5) NULL DEFAULT NULL AFTER `EdPerformed`");
# $add_remarkCode->execute();
# $add_remarkCode->finish();

# In MMS where the TrID status is Reconciled with $0 Balance Due,
# remove the BI Billed Inprocess transaction line causing the claim to remain as In Process.

# my $Bill_InProcess_Notes = $dbh->prepare("DELETE NoteTrans FROM NoteTrans LEFT JOIN Treatment ON Treatment.TrID = NoteTrans.TrID WHERE Treatment.BillStatus = 5 AND Treatment.AmtDue = '0.00' AND NoteTrans.Code = 'BI' AND NoteTrans.SRC = 'BI'");
# $Bill_InProcess_Notes->execute();

# print qq|   :::Deleted::: \n|;
# $Bill_InProcess_Notes->finish();

# SET SCRates columns default to 1

# my $alter1 = $dbh->prepare("ALTER TABLE `xSCRates` CHANGE `RatePct` `RatePct` DECIMAL(10,2) NULL DEFAULT '1.00'");
# $alter1->execute();
# $alter1->finish();

# # Prepare and execute the second ALTER TABLE statement
# my $alter2 = $dbh->prepare("ALTER TABLE `xSCRates` CHANGE `CommissionPct` `CommissionPct` FLOAT(10,2) NULL DEFAULT '1.00'");
# $alter2->execute();
# $alter2->finish();

# # Prepare and execute the third ALTER TABLE statement
# my $alter3 = $dbh->prepare("ALTER TABLE `xSCRates` CHANGE `RVUPct` `RVUPct` DECIMAL(10,4) NULL DEFAULT '1.000'");
# $alter3->execute();
# $alter3->finish();

# Disconnect the database handle
$dbh->disconnect();

myDBI->cleanup();
print qq|#${cmd}: Complete | . localtime() . qq|\n\n|;
############################################################################
exit;
