#!/usr/bin/perl
use lib 'C:/xampp/htdocs/src/lib';
use DBI;
use DBForm;
use DBA;
use cBill;

############################################################################
# set Intake Date/Time from H0031 or 90801
############################################################################
my $form = DBForm->new();
my $dbh  = $form->dbconnect();

# BillDate?
my ( $BillDate, $NEXTBILLDATE ) = cBill->getBillDate();
$BillDate = $form->{'BillDate'} if ( $form->{'BillDate'} );
print qq|BillDate: ${BillDate}\n|;
############################################################################
my $sUpdateIntake =
  $dbh->prepare("update ClientIntake set IntDate=? where ClientID=?");
my $sUpdateAdmit = $dbh->prepare(
"update ClientAdmit set InPatientTrID=?,InPatientProcCode=?,InPatientDisStatus=? where ID=?"
);
my $sClientIntake =
  $dbh->prepare("select * from ClientIntake where ClientID=?");
my $sClientAdmit = $dbh->prepare("select * from ClientAdmit where ID=?");
my $sClientReferrals =
  $dbh->prepare("select * from ClientReferrals where ClientID=?");
my $sxSC   = $dbh->prepare("select * from xSC where InsID=391 and SCNum=?");
my $qNotes = qq|
select NoteTrans.ID, NoteTrans.TrID, NoteTrans.SCID
     , Treatment.ContLogDate, Treatment.ContLogBegTime, Treatment.ContLogEndTime, Treatment.ProvOKTime
     , Treatment.ClinicID, Treatment.ProvID, Treatment.ClientID, Treatment.POS
     , xSC.InsID, xSC.SCNum
  from NoteTrans
    left join Treatment on Treatment.TrID=NoteTrans.TrID
    left join xSC on xSC.SCID=NoteTrans.SCID
  where NoteTrans.BillDate='$BillDate'
    and (xSC.SCNum like 'H0031%'
     or  xSC.SCNum='90791' or xSC.SCNum='90792'
     or  xSC.SCNum='99201' or xSC.SCNum='99202' or xSC.SCNum='99203' or xSC.SCNum='99204' or xSC.SCNum='99205'
     or  xSC.SCNum='99301' or xSC.SCNum='99302' or xSC.SCNum='99303' or xSC.SCNum='99304' or xSC.SCNum='99305' or xSC.SCNum='99302'
     or  xSC.SCNum='96150' or xSC.SCNum='W9003')
  order by NoteTrans.ProvID, NoteTrans.ClientID, NoteTrans.ContDate
|;

#warn qq|qNotes=\n$qNotes\n|;
my $sNotes = $dbh->prepare($qNotes);
$sNotes->execute() || $form->dberror($qNotes);
while ( $rNotes = $sNotes->fetchrow_hashref ) {
    print
qq|Intake: ProvID: $rNotes->{'ProvID'} ClientID: $rNotes->{'ClientID'} TrID: $rNotes->{'TrID'}\n|;
    my $rClientAdmit = ();
    $rClientAdmit->{'ClientID'}     = $rNotes->{'ClientID'};
    $rClientAdmit->{'CreateProvID'} = $form->{'LOGINPROVID'};
    $rClientAdmit->{'CreateDate'}   = $form->{'TODAY'};
    $rClientAdmit->{'ChangeProvID'} = $form->{'LOGINPROVID'};
    $rClientAdmit->{'ClinicID'}     = $rNotes->{'ClinicID'};
    $rClientAdmit->{'ProvID'}       = $rNotes->{'ProvID'};
    $rClientAdmit->{'AdmitDate'}    = $rNotes->{'ContLogDate'};
    $rClientAdmit->{'AdmitTime'}    = $rNotes->{'ContLogBegTime'};
    $rClientAdmit->{'TrID'}         = $rNotes->{'TrID'};

#foreach my $f ( sort keys %{$rClientAdmit} ) { warn "rClientAdmit-$f=$rClientAdmit->{$f}\n"; }
    my $where =
qq|ClientID="$rNotes->{'ClientID'}" and (ProvID="$rNotes->{'ProvID'}" or ProvID is null) and (TrID="$rNotes->{'TrID'}" or TrID=0)|;
    my $ID = DBA->doUpdate( $form, 'ClientAdmit', $rClientAdmit, $where );

#warn qq|Update ClientIntake($rNotes->{'ContLogDate'},$rNotes->{'ClientID'})\n|;
    $sUpdateIntake->execute( $rNotes->{'ContLogDate'}, $rNotes->{'ClientID'} )
      || $form->dberror("Fail: update ClientIntake-IntDate!");

    # setup InPatient Procedure Note for Meaningful Use...
    my $InPatientTrID =
      main->setInPatientNote( $rNotes->{'ClientID'}, $rNotes->{'TrID'}, $ID );
}
$sNotes->finish();
$sUpdateIntake->finish();
$sUpdateAdmit->finish();
$sClientIntake->finish();
$sClientAdmit->finish();
$sClientReferrals->finish();
$sxSC->finish();
$form->complete();
exit;
############################################################################
sub setInPatientNote {
    my ( $self, $ClientID, $TrID, $AdmitID ) = @_;

    # check for InPatient...
    $sClientReferrals->execute($ClientID)
      || $form->dberror("setInPatientNote: select ClientReferrals ${ClientID}");
    my $rClientReferrals   = $sClientReferrals->fetchrow_hashref;
    my $NewTrID            = '';
    my $InPatientProcCode  = $rClientReferrals->{'InPatientProcCode'};
    my $InPatientDisStatus = $rClientReferrals->{'InPatientDisStatus'};
    warn
qq|ENTER setInPatientNote: $NewTrID,$InPatientProcCode,$InPatientDisStatus\n|;
    return ( $NewTrID, $InPatientProcCode, $InPatientDisStatus )
      if ( $InPatientProcCode eq '' );

# ?? return($NewTrID,$InPatientProcCode,$InPatientDisStatus) if ( $InPatientDisStatus eq '' );
    my $sTreatment = $dbh->prepare("select * from Treatment where TrID=?");
    $sTreatment->execute($TrID)
      || $form->dberror("setInPatientNote: select Treatment ${TrID}");
    if ( my $rTreatment = $sTreatment->fetchrow_hashref ) {
        my $BillDate = $rTreatment->{'BillDate'};
        $sClientAdmit->execute($AdmitID)
          || $form->dberror("setInPatientNote: select ClientAdmit ${AdmitID}");
        my $rClientAdmit = $sClientAdmit->fetchrow_hashref;
        $NewTrID = $rClientAdmit->{InPatientTrID};
        my $ServiceCode =
          DBA->getxref( $form, 'xInPatientProcedures', $InPatientProcCode,
            'ConceptCode' );
        warn qq|UPDATE: $NewTrID,$InPatientProcCode,$InPatientDisStatus\n|;
        $sxSC->execute($ServiceCode)
          || $form->dberror(
            "setInPatientNote: select xSC SCNum=${ServiceCode}");
        my $rxSC       = $sxSC->fetchrow_hashref;
        my $rInPatient = $rTreatment;
        $rInPatient->{'SCID'}               = $rxSC->{'SCID'};
        $rInPatient->{'InPatientDisStatus'} = $InPatientDisStatus;
        $rInPatient->{'PaidDate'}  = $BillDate; # don't pay Provider for service
        $rInPatient->{'Type'}      = '1';   # always a Progress Type (ProgNotes)
        $rInPatient->{'AmtDue'}    = 0;
        $rInPatient->{'Units'}     = 1;
        $rInPatient->{'POS'}       = '1';   # Inpatient Hospital
        $rInPatient->{'BilledAmt'} = 0;
        $rInPatient->{'Path'}      = '';
        $rInPatient->{'CreateProvID'} = $form->{'LOGINPROVID'};
        $rInPatient->{'CreateDate'}   = $form->{'TODAY'};
        $rInPatient->{'ChangeProvID'} = $form->{'LOGINPROVID'};

        foreach my $f ( sort keys %{$rInPatient} ) {
            warn "rInPatient-$f=$rInPatient->{$f}\n";
        }
        my $where = $NewTrID eq '' ? '' : qq|TrID='${NewTrID}'|;
        $NewTrID = DBA->doUpdate( $form, 'Treatment', $rInPatient, $where );
        my $rInPatientProg = ();
        $rInPatientProg->{'NoteID'}       = $NewTrID;
        $rInPatientProg->{'ClientID'}     = $ClientID;
        $rInPatientProg->{'CreateProvID'} = $form->{'LOGINPROVID'};
        $rInPatientProg->{'CreateDate'}   = $form->{'TODAY'};
        $rInPatientProg->{'ChangeProvID'} = $form->{'LOGINPROVID'};

        foreach my $f ( sort keys %{$rInPatientProg} ) {
            warn "rInPatientProg-$f=$rInPatientProg->{$f}\n";
        }
        my $ProgID = DBA->doUpdate( $form, 'ProgNotes', $rInPatientProg,
            "NoteID='${NewTrID}'" );

        main->AutoReconcile( $form, $NewTrID, $rxSC->{SCNum}, $BillDate, 0 );

        $sUpdateAdmit->execute( $NewTrID, $InPatientProcCode,
            $InPatientDisStatus, $AdmitID )
          || $form->dberror("setInPatientNote: update ClientAdmit ${NewTrID}!");
    }
    $sTreatment->finish();
    return ( $NewTrID, $InPatientProcCode, $InPatientDisStatus );
}
############################################################################
sub AutoReconcile {
    my ( $self, $form, $TrID, $SCNum, $RecDate, $AmtDue ) = @_;
    warn qq|TrID=$TrID, RecDate=$RecDate, AmtDue=$AmtDue\n|;
    my ( $SRC, $Code ) = ( 'BI', 'AR' );
    my $r835 = ();
    $r835->{'TrID'}     = $TrID;
    $r835->{'SCNum'}    = $SCNum;
    $r835->{'BillDate'} = $RecDate;
    $r835->{'RecDate'}  = $RecDate;
    $r835->{'PaidAmt'}  = $AmtDue;
    my $TheDate = DBUtil->Date( $RecDate, 'fmt', 'MM/DD/YYYY' );
    $r835->{'RefID'} = 'AR:' . $TheDate;
    my ( $trid, $scid, $code, $type ) =
      uBill->postClaim( $form, $r835, $SRC, $Code, $StatusMsg );

    # did we reconcile this note before it was even billed?
    uBill->fixBillDate( $form, $TrID, $RecDate );

    # don't leave it unreviewed.
    uBill->fixRevDates( $form, $TrID, 3 );
    return (1);
}
