#!/usr/bin/perl
use lib '/var/www/okmis/src/lib';

use CGI::Carp qw(warningsToBrowser);
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
use Cwd;
use DBI;
use myForm;
use myDBI;
use DBUtil;
use myConfig;
use myHTML;
use SysAccess;
use gQRDAIIIXML;
use XML::LibXSLT;
use XML::LibXML;
binmode STDOUT, ":utf8";
my $debug = 1;

############################################################################
my $form = myForm->new();
my $dbh  = myDBI->dbconnect( $form->{'DBNAME'} );
warn qq|\n\ngenQRDAs: ENTER\n| if ($debug);

# if ( $debug ) { foreach my $f ( sort keys %{$form} ) { warn "genQRDAs: form-$f=$form->{$f}<BR>\n"; } }
if ( !SysAccess->chkPriv( $form, 'MUAgent' ) ) {
    myDBI->error("Meaningful Use / Access Denied!");
}

my $NextLocation;
if   ( $form->{submit} ) { $NextLocation = main->submit($form); }
else                     { $NextLocation = main->report($form); }
myDBI->cleanup();
warn qq|genQRDAs: NextLocation=${NextLocation}\n| if ($debug);
print $NextLocation;
exit;

############################################################################
sub report {
    my ( $self, $form ) = @_;
    $pwd = cwd();
    warn qq|genQRDAs: pwd=${pwd}\n| if ($debug);
    my $cmd =
qq|/wamp64_updated/www/src/cgi/bin/GenReport.cgi Name=GenerateQRDAIII&daterange=lastyear&ProvIDs=$form->{'ProvIDs'}&DBNAME=$form->{DBNAME}&mlt=$form->{mlt}|;
    warn qq|genQRDAIII: cmd=${cmd}\n| if ($debug);
    my $html = `${cmd}`;
    my $html = myHTML->close(1);
    return ($html);
}

sub submit {
    my ( $self, $form ) = @_;
    my $Token  = DBUtil->genToken();
    my $Folder = $form->{'Folder'} ? $form->{'Folder'} : $Token;
    my $ForProvID =
      $form->{'ForProvID'} ? $form->{'ForProvID'} : $form->{'LOGINPROVID'};
    $form                = DBUtil->setDates($form);
    $form->{'ProvIDs'}   = $form->{'ForProvID'} if ( $form->{'ProvIDs'} eq '' );
    $form->{'MEASUREID'} = $form->{'CQM'};
    my $cnt = 0;

    foreach my $ProvID ( split( chr(253), $form->{ProvIDs} ) ) {
        my $xml = qq|<?xml version="1.0" encoding="utf-8"?>\n|
          . gQRDAIIIXML->setXML( $form, $ProvID, '', $form->{FromDate},
            $form->{ToDate}, $form->{'MEASUREID'} );
        my $xmlfile = qq|/tmp/XML_${Token}_${ProvID}.xml|;
        my $xmlpath = qq|$form->{DOCROOT}${xmlfile}|;
        open( XML, ">", $xmlpath ) || die "Couldn't open '${xmlpath}' file: $!";
        print XML $xml;
        close(XML);

        # next the generate QRDA file...
        # IF you want to VIEw the QRDA change the suffix to '.htm'!!
        my $visitout  = gQRDAIIIXML->styleQRDA( $form, $xmlfile );
        my $visitfile = qq|/tmp/QRDAIII_${Token}_${ProvID}.xml|;
        my $visitpath = qq|$form->{DOCROOT}${visitfile}|;
        open( OUT, ">:encoding(UTF-8)", $visitpath )
          || die "Couldn't open '${visitpath}' file: $!";
        print OUT $visitout;
        close(OUT);
        $cnt++;
    }

    my $result = '';
    if ($cnt
      ) ## create temporary directory for files created and zip from this shell...
    {
        my $BIN = myConfig->cfg('BIN');
        my $shell =
`${BIN}/zipFILEs $form->{'DOCROOT'} "QRDAIII_${Token}*" ${Folder} ${ForProvID}`;
        warn qq|shell=${shell}\n| if ($debug);
        main->addEDoc( $Folder, $ForProvID );
        $result = $shell if ( $form->{'LOGINPROVID'} == 91 );
    }
    else {
        DBA->setAlert( $form, "Count is zero selected!<BR>No files created!" );
    }
    my $link =
qq|/cgi/bin/mis.cgi?view=ListExportFiles.cgi&Provider_ProvID=${ForProvID}&mlt=$form->{'mlt'}&misLINKS=$form->{'misLINKS'}|;
    warn qq|genQRDAs: setHTML: link=${link}=\n| if ($debug);
    my $html =
      myHTML->newHTML( $form, 'Send QRDAIII',
        'CheckPopupWindow noclock countdown_1' )
      . qq|

<TABLE CLASS="main" >
  <TR> <TD CLASS="hdrcol title" >Send QRDAIIIs</TD> </TR>
</TABLE>
<FORM NAME="QRDA" ACTION="/cgi/bin/sendQRDA.cgi" METHOD="POST" >
<P CLASS="port hdrtxt heading" >Export Documents created as:<BR>Folder ${Folder}</P>
<P CLASS="port hdrtxt title" >Close this window to navigate to your Export QRDA Documents screen.</P>
<P CLASS="port hdrcol" >${result}</P>
<TABLE CLASS="main fullsize" >
  <TR>
    <TD CLASS="numcol" >
      <INPUT TYPE="button" NAME="cancel" VALUE="close" ONCLICK="javascript:LoadInParent('${link}',true)" >
    </TD>
  </TR>
</TABLE>

</LOADHIDDEN>
</FORM>
<SCRIPT LANGUAGE="JavaScript">
document.QRDA.elements[0].focus();
</SCRIPT>
<BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR>
</BODY>
</HTML>
|;
    return ($html);
}
############################################################################
sub addEDoc {
    my ( $self, $Folder, $ForProvID ) = @_;
    my $r = ();
    $r->{ProvID}       = $ForProvID;
    $r->{Title}        = $Folder;
    $r->{Descr}        = "QRDA Zip file created " . localtime();
    $r->{Path}         = qq|/Provider/EDocs/${ForProvID}/${Folder}.zip|;
    $r->{CreateProvID} = $form->{LOGINPROVID};
    $r->{CreateDate}   = $form->{TODAY};
    $r->{Type}         = 40;                                             # QRDAs
    $r->{Public}       = 0;
    $query =
      DBA->genReplace( $form, $dbh, 'ProviderEDocs', $r, "Path='$r->{Path}'" );
    my $sql = $dbh->prepare($query);
    $sql->execute() || myDBI->dberror($query);
    return ();
}
############################################################################
