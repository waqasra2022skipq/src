#!/usr/bin/perl
use lib '/home/okmis/mis/src/lib';
use Cwd;
use DBI;
use DBForm;
use DBUtil;
use myConfig;
use MgrTree;
use myHTML;
use SysAccess;
use gXML;
use XML::LibXSLT;
use XML::LibXML;
binmode STDOUT, ":utf8";
my $debug = 1;

############################################################################
my $form = DBForm->new();
$form = DBUtil->setDates($form);
print qq|\n\ngenQRDAs: ENTER\n| if ( $debug );
if ( ! SysAccess->chkPriv($form,'Agent') )
{ $form->error("generate QRDAs/ Access Denied!"); }

if ( $debug ) { foreach my $f ( sort keys %{$form} ) { print "genQRDAs: form-$f=$form->{$f}\n"; } }

my $Token = DBUtil->genToken();
my $Folder = $form->{'Folder'} ? $form->{'Folder'} : $Token;
my $ForProvID = $form->{'ForProvID'} ? $form->{'ForProvID'} : $form->{'LOGINPROVID'};
my @ClientIDs = main->setClientIDs($form,$ForProvID);
print qq|genQRDAs: foreach: ClientIDs=@ClientIDs=\n| if ( $debug );
$form->{'MEASUREID'} = $form->{'CQM'};
my $cnt = 0;
    foreach my $ClientID ( @ClientIDs )
    {
print qq|genQRDAs: setXML: ClientID=${ClientID}=\n| if ( $debug );
print qq|genQRDAs: ERROR: ClientID=${ClientID}=\n| if ( $debug && $ClientID eq '' );
      my $xml = qq|<?xml version="1.0" encoding="utf-8"?>\n|.gXML->setXML($form,$ForProvID,$ClientID,'',$form->{FromDate},$form->{ToDate},'QRDA nonulls');
      my $xmlfile = qq|/tmp/XML_${Token}_${ForProvID}_${ClientID}.xml|;
      my $xmlpath = qq|$form->{DOCROOT}${xmlfile}|;
      open(XML, ">", $xmlpath) || die "Couldn't open '${xmlpath}' file: $!"; 
      print XML $xml;
      close(XML);

      # next the generate QRDA file...
      my $visitout = gXML->styleQRDA($form,$xmlfile);
      my $visitfile = qq|/tmp/QRDA_${Token}_${ForProvID}_${ClientID}.xml|;
      my $visitpath = qq|$form->{DOCROOT}${visitfile}|;
      open(OUT, ">:encoding(UTF-8)", $visitpath) || die "Couldn't open '${visitpath}' file: $!"; 
      print OUT $visitout;
      close(OUT);
      $cnt++;
    }

  my $result = '';
  if ( $cnt )  ## create temporary directory for files created and zip from this shell...
  {
    my $BIN = myConfig->cfg('BIN');
# just move the QRDA files, not the XML files...
    my $shell = `${BIN}/zipFILEs $form->{'DOCROOT'} "QRDA_${Token}*" ${Folder} ${ForProvID}`;
print qq|shell=${shell}\n| if ( $debug );
    main->addEDoc($form,$Folder,$ForProvID);
    $result = $shell if ( $form->{'LOGINPROVID'} == 91 );
  }
  else { $result = "Count is zero selected!<BR>No files created!"; }
print qq|result: ${result}\n|;
$form->complete();
exit;

############################################################################
sub setClientIDs
{
  my ($self,$form,$ForProvID) = @_;
  my $dbh = $form->dbconnect();
print qq|setClientIDs: ForProvID=${ForProvID}\n|;
  my @ClientIDs= ();
  my $sClient = $dbh->prepare("select ClientID from Client where ProvID=?");
  my @ProvIDs = MgrTree->getProviders($form,$ForProvID);
  my $sProvider = $dbh->prepare("select * from Provider where ProvID=?");
  $sProvider->execute($ForProvID) || $form->dberror("error: select Provider ${ForProvID}");
  my $rProvider = $sProvider->fetchrow_hashref;
  unshift(@ProvIDs,$rProvider);     # push to the front of the array.
  $sProvider->finish();
  foreach my $rProvider ( @ProvIDs )
  {
print qq|setClientIDs: ProvID=$rProvider->{ProvID}\n|;
    $sClient->execute($rProvider->{'ProvID'}) || $form->dberror("error: select Client ${ClientID}");
    while ( my ($ClientID) = $sClient->fetchrow_array )
    { push(@ClientIDs,$ClientID); print qq|setClientIDs: ClientID=${ClientID}\n|; }
  }
  $sClient->finish();
  return(@ClientIDs);
}
sub addEDoc
{
  my ($self,$form,$Folder,$ForProvID) = @_;
  my $dbh = $form->dbconnect();
  my $r = ();
  $r->{ProvID} = $ForProvID;
  $r->{Title} = $Folder;
  $r->{Descr} = "QRDA Zip file created ".localtime();
  $r->{Path} = qq|/Provider/EDocs/${ForProvID}/${Folder}.zip|;
  $r->{CreateProvID} = $form->{LOGINPROVID};
  $r->{CreateDate} = $form->{TODAY};
  $r->{Type} = 40;     # QRDAs
  $r->{Public} = 0;
foreach my $f ( sort keys %{$r} ) { print "addEDoc: r-$f=$r->{$f}\n"; }
  $query = DBA->genReplace($form,$dbh,'ProviderEDocs',$r,"Path='$r->{Path}'");
  my $sql = $dbh->prepare($query);
  $sql->execute() || $form->dberror($query);
  return();
}
############################################################################
