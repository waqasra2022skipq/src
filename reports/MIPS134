#!/usr/bin/perl
use lib '/var/www/okmis/src/lib';
use CGI       qw(:standard escape);
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
use DBI;
use myForm;
use myDBI;
use DBA;
use DBUtil;
use Time::Local;
use uCalc;
my $DT = localtime();
############################################################################
# usage:
#   MIPS134
############################################################################
my $form  = myForm->new();
my $dbh   = myDBI->dbconnect( $form->{'DBNAME'} );
my $debug = $form->{'LOGINPROVID'} == 91 ? 0 : 0;
if ($debug) {
    foreach my $f ( sort keys %{$form} ) { print "form-$f=$form->{$f}\n"; }
}
$form = DBUtil->setDates($form);
my $DateRange = qq|from $form->{FromDateD} thru $form->{ToDateD}|;

my $multidel  = 'Ã½';
my $ForProvID = $form->{ForProvID} ? $form->{ForProvID} : $form->{LOGINPROVID};

# join xInsurance needed for withSelection
my $withSelection = DBA->withSelection( $form, 'and', 'Client.clinicClinicID',
    'Treatment.ProvID', 'Treatment.ClientID', 'Treatment.TrID' );
my $Header = DBA->withSelectionHeader($form);
print qq|Header: ${Header}\n|              if ($debug);
$withSelection .= qq| and Client.Active=1| if ( $form->{Active} );
$QID = qq|QID134|;
$TITLE =
qq|Preventive Care and Screening: Screening for Depression and Follow-Up Plan - National Quality Strategy Domain: Community/Population Health - Meaningful Measure Area: Prevention, Treatment, and Management of Mental Health|;
$CTYPE = qq|MIPS CLINICAL QUALITY MEASURES (CQMS)|;
$MTYPE = qq|Process|;
$DESC =
qq|Percentage of patients aged 12 years and older screened for depression on the date of the encounter using an age appropriate standardized depression screening tool AND if positive, a follow-up plan is documented on the date of the positive screen|;
$INST =
qq|This measure is to be submitted a minimum of once per measurement period for patients seen during the measurement period. The most recent quality-data code submitted will be used for performance calculation. This measure may be submitted by Merit-based Incentive Payment System (MIPS) eligible clinicians who perform the quality actions described in the measure based on the services provided and the measure-specific denominator coding. The follow-up plan must be related to a positive depression screening, example: "Patient referred for psychiatric evaluation due to positive depression screening".|;
my @FLDS = (
    'ClientName:ClientName', 'ClientID:ClientID',
    'Age:Age',               'PrimaryProvider:ProviderName'
);
my $numFLDS = scalar(@FLDS) - 2;
print qq|numFLDS=${numFLDS}\n| if ($debug);

my $sGCode = $dbh->prepare(
"select xSC.SCNum, Treatment.TrID from Treatment left join xSC on xSC.SCID=Treatment.SCID where Treatment.ContLogDate BETWEEN '2024-01-01' AND '2024-12-31'  AND Treatment.ClientID=? and (xSC.SCNum LIKE '%G8431%' OR xSC.SCNum LIKE '%G8433%' OR xSC.SCNum LIKE '%G8432%' OR xSC.SCNum LIKE '%G8510%' OR xSC.SCNum LIKE '%G8511%')"
);

my $sPHQ9 = $dbh->prepare(
"SELECT * FROM ClientPHQ9 WHERE ClientID=? AND TestDate BETWEEN '2024-01-01' AND '2024-12-31' ORDER BY TestDate DESC"
);
my $sPHQ2 = $dbh->prepare(
"SELECT * FROM ClientPHQ2 WHERE ClientID=? AND TestDate BETWEEN '2024-01-01' AND '2024-12-31' ORDER BY TestDate DESC"
);

my $sPHQ15 = $dbh->prepare(
"SELECT * FROM ClientPHQ15 WHERE ClientID=? AND TestDate BETWEEN '2024-01-01' AND '2024-12-31'"
);

my $qClProbs = $dbh->prepare(
    "SELECT cp.InitiatedDate, i.ICD10, i.sctName FROM ClientProblems cp
                                LEFT JOIN okmis_config.misICD10 i ON cp.UUID = i.ID 
                                WHERE cp.ClientID = ? AND cp.Active = 1 AND 
                                i.ICD10 IN (
    'F30.2', 'F30.3', 'F30.4', 'F30.8', 'F30.9', 'F30.10', 'F30.11', 'F30.12', 'F30.13',
    'F31.0', 'F31.10', 'F31.11', 'F31.12', 'F31.13', 'F31.2', 'F31.30', 'F31.31', 'F31.32',
    'F31.4', 'F31.5', 'F31.60', 'F31.61', 'F31.62', 'F31.63', 'F31.64', 'F31.70', 'F31.71',
    'F31.72', 'F31.73', 'F31.74', 'F31.75', 'F31.76', 'F31.77', 'F31.78', 'F31.81', 'F31.89', 'F31.9'
);"
);
my ( $rcount, $total, $PFMET, $DNEXCEPTION, $PFNOTMET, $DNOM, $DNEXl ) =
  ( 0, 0, 0, 0, 0, 0, 0 );

my $table_header = '';
foreach my $f (@FLDS) {
    my ( $fld, $hdr ) = split( ':', $f );
    $table_header .= qq|${hdr}\t|;
}
$table_header .= qq|Status\t|;

$table_header .= qq|\n|;
$table_entries = '';

our %providers = (
    "2118" => {
        'name'     => "Kizzy McCaskill",
        "G8431"    => 0,
        "G8510"    => 0,
        "G8432"    => 0,
        "G8511"    => 0,
        "G8433"    => 0,
        "DCNOTMET" => 0
    },
    "2128" => {
        'name'     => "Rebecca Jones L",
        "G8431"    => 0,
        "G8510"    => 0,
        "G8432"    => 0,
        "G8511"    => 0,
        "G8433"    => 0,
        "DCNOTMET" => 0
    },
    "2686" => {
        'name'     => "Shelby Lucas",
        "G8431"    => 0,
        "G8510"    => 0,
        "G8432"    => 0,
        "G8511"    => 0,
        "G8433"    => 0,
        "DCNOTMET" => 0
    },
    "958" => {
        'name'     => "Mindy Jones K",
        "G8431"    => 0,
        "G8510"    => 0,
        "G8432"    => 0,
        "G8511"    => 0,
        "G8433"    => 0,
        "DCNOTMET" => 0
    }
);

our %providers_rates = (
    "2118" => {
        'name'      => "Kizzy McCaskill",
        "total_pop" => 0,
        "PFMET"     => 0,
        "PFNOTMET"  => 0
    },
    "2128" => {
        'name'      => "Rebecca Jones L",
        "total_pop" => 0,
        "PFMET"     => 0,
        "PFNOTMET"  => 0
    },
    "2686" => {
        'name'      => "Shelby Lucas",
        "total_pop" => 0,
        "PFMET"     => 0,
        "PFNOTMET"  => 0
    },
    "958" => {
        'name'      => "Mindy Jones K",
        "total_pop" => 0,
        "PFMET"     => 0,
        "PFNOTMET"  => 0
    }
);

my $ClientSelection =
  DBA->withSelection( $form, 'and', 'Client.clinicClinicID' );

my $qRecord = qq|
    select Treatment . TrID, Treatment . ContLogDate, xSC . SCNum,
      xInsurance . Descr as Insurance,
    Client . LName, Client . FName
    , Clinic . Name as ClinicName
        , Client . ClientID, Provider . ProvID, ClientEmergency . HospiceCheck
        , CONCAT( Provider . LName, ', ', Provider . FName ) as PrimaryProvider
        ,CONCAT(Client.LName,', ',Client.FName) as ClientName
        ,Client.DOB,TIMESTAMPDIFF(YEAR, Client.DOB, CURDATE()) AS Age
        ,count(*) as pcount
    from Treatment 
    left join Client on Client.ClientID=Treatment.ClientID
    LEFT JOIN ClientEmergency ON Client
      . ClientID = ClientEmergency
      . ClientID
    left join Provider on Provider.ProvID=Treatment.ProvID
    left join Provider as Clinic on Clinic . ProvID = Client . clinicClinicID
    left join xSC on xSC.SCID=Treatment.SCID
    left join xInsurance on xInsurance.ID=xSC.InsID
    WHERE Treatment.ContLogDate BETWEEN '2024-01-01' AND '2024-12-31' AND
    TIMESTAMPDIFF( YEAR, Client . DOB, CURDATE() ) >= 12
    AND Treatment
      . ProvID IN( "2118", "2128", "2686", "958" ) AND xInsurance
    . ID = 212 AND Treatment . ClinicID = 101
    AND(
        xSC
          . SCNum IN(
            '59400', '59510', '59610', '59618', '90791', '90792',
            '90832', '90834', '90837', '92622', '92625', '96112',
            '96105', '96116', '96125', '96136', '96138', '96156',
            '96158', '97161', '97162', '97163', '97164', '97165',
            '97166', '97167', '97802', '97803', '98966', '98967',
            '98968', '99078', '99202', '99203', '99204', '99205',
            '99212', '99213', '99214', '99215', '99304', '99305',
            '99306', '99307', '99308', '99309', '99310', '99315',
            '99316', '99341', '99342', '99344', '99345', '99347',
            '99348', '99349', '99350', 'G0101', 'G0270', 'G0271',
            'G0402', 'G0438', 'G0439', 'G0444'
          ) OR xSC
          . SCNum LIKE '99384%' OR xSC
          . SCNum LIKE '96110%' OR xSC
          . SCNum LIKE '99385%' OR xSC
          . SCNum LIKE '99386%' OR xSC
          . SCNum LIKE '99387%' OR xSC
          . SCNum LIKE '99394%' OR xSC
          . SCNum LIKE '99395%' OR xSC
          . SCNum LIKE '99396%' OR xSC
          . SCNum LIKE '99397%'
      )

 group by Treatment.ClientID
|;

my $srecord = $dbh->prepare($qRecord);
$srecord->execute();

my $qGDSS = qq|
    SELECT * FROM ClientGDSS WHERE ClientID =? AND TestDate BETWEEN '2024-01-01' AND '2024-12-31';
|;
my $sGDSS = $dbh->prepare($qGDSS);

my $qGDSL = qq|
    SELECT * FROM ClientGDSL WHERE ClientID =? AND TestDate BETWEEN '2024-01-01' AND '2024-12-31';
|;
my $sGDSL = $dbh->prepare($qGDSL);

my $sTRPlan = $dbh->prepare(
"SELECT * FROM `ClientTrPlan` WHERE `ClientID` = ? AND `EffDate` BETWEEN '2024-01-01' AND '2024-12-31'"
);

my $sPriorDepression = $dbh->prepare(
    "SELECT cp.InitiatedDate, i.ICD10, i.sctName FROM ClientProblems cp
                                LEFT JOIN okmis_config.misICD10 i ON cp.UUID = i.ID 
                                WHERE cp.ClientID = ? AND cp.InitiatedDate < '2024-01-01' AND
                                i.ICD10 IN ('F01.51', 'F32.0', 'F32.1', 'F32.2', 'F32.3', 'F32.4', 'F32.5', 'F32.89', 'F32.9', 'F33.0', 'F33.1', 'F33.2', 'F33.3', 'F33.40',
'F33.41', 'F33.42', 'F33.8', 'F33.9', 'F34.1', 'F34.81', 'F34.89', 'F43.21', 'F43.23', 'F53.0', 'F53.1', 'O90.6', 'O99.340',
'O99.341', 'O99.342', 'O99.343', 'O99.345'
)"
);

my $ProvID;

while ( my $rrecord = $srecord->fetchrow_hashref ) {

    my $ClientID = $rrecord->{ClientID};

    # Check for bipolar disorder;

    $DNOM++;

    $qClProbs->execute($ClientID);
    my $rClProbs    = $qClProbs->fetchrow_hashref;
    my $rClProbsCnt = $qClProbs->rows;

    $sPriorDepression->execute($ClientID);
    my $rPriorDepression    = $sPriorDepression->fetchrow_hashref;
    my $rPriorDepressionCnt = $sPriorDepression->rows;

    if ( $rPriorDepressionCnt > 0 ) {
        $ICD10   = $rPriorDepression->{'ICD10'};
        $sctName = $rPriorDepression->{'sctName'};

        $rrecord->{'status'} =
"<p STYLE='background-color: red'><b>Denominator Excluded Prior Depression:</b> ${ICD10} ${sctName}</p>";
        $DNEXl++;
    }
    elsif ( $rClProbsCnt > 0 ) {

        $ICD10   = $rClProbs->{'ICD10'};
        $sctName = $rClProbs->{'sctName'};

        $rrecord->{'status'} =
"<p STYLE='background-color: red'><b>Denominator Excluded:</b> ${ICD10} ${sctName}</p>";
        $DNEXl++;
    }
    else {
        $ProvID = $rrecord->{'ProvID'};

        $providers_rates{$ProvID}{'total_pop'} += 1;

        $sGCode->execute($ClientID);
        my $rGCode = $sGCode->fetchrow_hashref;

        my $sGRows = $sGCode->rows;

        # if ( $sGRows < 1 ) {

        $sPHQ9->execute($ClientID);
        my $sPHQ9Rows  = $sPHQ9->rows;
        my $rTotalPHQ9 = $sPHQ9->fetchrow_hashref;

        $sPHQ2->execute($ClientID);
        my $sPHQ2Rows  = $sPHQ2->rows;
        my $rTotalPHQ2 = $sPHQ2->fetchrow_hashref;

        $sGDSS->execute($ClientID);
        my $GDSSRowsCnt = $sGDSS->rows;
        my $rGDSS       = $sGDSS->fetchrow_hashref;

        $sGDSL->execute($ClientID);
        my $GDSLRowsCnt = $sGDSL->rows;
        my $rGDSL       = $sGDSL->fetchrow_hashref;

        my $positive = 0;
        my $val      = 0;

        if ( $GDSLRowsCnt > 0 ) {
            $val = $rGDSL->{"Score"};
            $rrecord->{'status'} = flagCountLabel( 'GDSL', $val, 20 );

            if ( $val >= 20 ) {
                if ( checkFollowUpPlan($ClientID) ) {
                    updatePFMET( $ProvID, 'G8431' );
                }
                else {
                    $rrecord->{'status'} =
"<p STYLE='background-color: red'> <b>Major Depressive:</b> G8511, GDSL Total of ${val}<BR>screening for clinical depression is documented as being POSITIVE and a follow-up plan is not documented</p>";
                    updatePFNOTMET( $ProvID, 'G8511' );
                }
            }
            else {
                updatePFMET( $ProvID, 'G8510' );
            }
        }
        elsif ( $GDSSRowsCnt > 0 ) {
            $val = $rGDSS->{"Score"};
            $rrecord->{'status'} = flagCountLabel( 'GDSS', $val, 5 );

            if ( $val >= 5 ) {

                if ( checkFollowUpPlan($ClientID) ) {
                    updatePFMET( $ProvID, 'G8431' );
                }
                else {
                    $rrecord->{'status'} =
"<p STYLE='background-color: red'> <b>Major Depressive:</b> G8511, GDSS Total of ${val}<BR>screening for clinical depression is documented as being POSITIVE and a follow-up plan is not documented</p>";
                    updatePFNOTMET( $ProvID, 'G8511' );
                }
            }
            else {
                updatePFMET( $ProvID, 'G8510' );
            }
        }
        elsif ( $sPHQ9Rows > 0 ) {
            $val = calcTotal( $rTotalPHQ9, "q", 1, 9 );
            $rrecord->{'status'} = flagCountLabel( 'PHQ9', $val, 10 );

            if ( $val >= 10 ) {
                if ( checkFollowUpPlan($ClientID) ) {
                    updatePFMET( $ProvID, 'G8431' );
                }
                else {
                    $rrecord->{'status'} =
"<p STYLE='background-color: red'> <b>Major Depressive:</b> G8511, PHQ9 Total of ${val}<BR>screening for clinical depression is documented as being POSITIVE and a follow-up plan is not documented</p>";
                    updatePFNOTMET( $ProvID, 'G8511' );
                }
            }
            else {
                updatePFMET( $ProvID, 'G8510' );
            }
        }

        elsif ( $sPHQ2Rows > 0 ) {
            $val = calcTotal( $rTotalPHQ2, "q", 1, 2 );
            $rrecord->{'status'} = flagCountLabel( 'PHQ2', $val, 3 );

            if ( $val >= 3 ) {
                if ( checkFollowUpPlan($ClientID) ) {
                    updatePFMET( $ProvID, 'G8431' );

                }
                else {
                    $rrecord->{'status'} =
"<p STYLE='background-color: red'> <b>Major Depressive:</b> G8511, PHQ2 Total of ${val}<BR>screening for clinical depression is documented as being POSITIVE and a follow-up plan is not documented</p>";

                    updatePFNOTMET( $ProvID, 'G8511' );
                }
            }
            else {
                updatePFMET( $ProvID, 'G8510' );
            }
        }

        if (   $sPHQ2Rows eq 0
            && $sPHQ9Rows eq 0
            && $GDSSRowsCnt eq 0
            && $GDSLRowsCnt eq 0 )
        {
            $PFNOTMET++;
            $rrecord->{'status'} =
"<p STYLE='background-color: red'>Performance Not Met(G8432), no PHQ2/PHQ9/GDSS/GDSL recorded</p>";
            $providers_rates{$ProvID}{'PFNOTMET'} += 1;
            $providers{$ProvID}{'G8432'}          += 1;

        }

# }
# else {
#             if ( $rGCode->{SCNum} =~ /G8431/ ) {
#                 $PFMET++;
#                 $providers_rates{$ProvID}{'PFMET'} += 1;
#                 $providers{$ProvID}{'G8431'}       += 1;
#                 $rrecord->{'status'} =
# "screening for clinical depression is documented as being POSITIVE and a follow-up plan is documented(G8431)";
#             }
#             if ( $rGCode->{SCNum} =~ /G8510/ ) {
#                 $PFMET++;
#                 $providers_rates{$ProvID}{'PFMET'} += 1;
#                 $providers{$ProvID}{'G8510'}       += 1;
#                 $rrecord->{'status'} =
# "Screening for depression is documented as negative, a follow-up plan is not required (G8510)";
#             }
#             if ( $rGCode->{SCNum} =~ /G8433/ ) {
#                 $DNEXCEPTION++;
#                 $providers_rates{$ProvID}{'DNEXCEPTION'} += 1;
#                 $providers{$ProvID}{'G8433'}             += 1;
#                 $rrecord->{'status'} =
# "Screening for depression not completed, documented patient or medical reason (G8433)";
#             }
#             if ( $rGCode->{SCNum} =~ /G8432/ ) {
#                 $PFNOTMET++;
#                 $providers_rates{$ProvID}{'PFNOTMET'} += 1;
#                 $providers{$ProvID}{'G8432'}          += 1;
#                 $rrecord->{'status'} =
# "Depression screening not documented, reason not given(G8432)";
#             }
#             if ( $rGCode->{SCNum} =~ /G8511/ ) {
#                 $PFNOTMET++;
#                 $providers_rates{$ProvID}{'PFNOTMET'} += 1;
#                 $providers{$ProvID}{'G8511'}          += 1;
#                 $rrecord->{'status'} =
# "Depression screening not documented, reason not given(G8511)";
#             }
# }

    }

    $rcount++;
    foreach my $f (@FLDS) {
        my ( $fld, $hdr ) = split( ':', $f );
        $table_entries .= qq|$rrecord->{$fld}\t|;
    }
    $table_entries .= qq|$rrecord->{'status'}\t|;

    $table_entries .= qq|\n|;

}

my $Data_Completeness_Numerator = $PFMET + $DNEXCEPTION + $PFNOTMET;
my $final_DENOM                 = $DNOM - $DNEXl;

my $nom_denom =
qq|Initial Population(Denominator) = ${DNOM} - Denominator Excluded(${DNEXl}) = ${final_DENOM}\n Numerator = Performance Met (${PFMET}) +  Denominator Exception (${DNEXCEPTION}) +  Performance Not Met (${PFNOTMET}) = ${Data_Completeness_Numerator} \n|;

$Header = qq|${DT}\n${QID} ${TITLE} ${DateRange} ${Header} \n ${nom_denom}|;

# Show Provider codes at the top
print
  "<div style='display: flex; flex-direction: column; gap: 20px; width:80%'>"
  ;    # Flex container
print
"<div style='display: flex; flex-direction: row; justify-content: space-between'>Providers Code Count</div>"
  ;    # Flex item

foreach my $ProvID ( sort keys %providers ) {
    print
"<div style='display: flex; flex-direction: row; justify-content: space-between'>"
      ;    # Flex item
    print "<span><b>Provider ID:</b> $ProvID </span>";
    foreach my $attribute ( reverse sort keys %{ $providers{$ProvID} } ) {
        if ( $attribute eq "DCNOTMET" ) {
            print
"<span><b>Data Completness Not Met:</b> $providers{$ProvID}{$attribute}</span>";
        }
        else {
            print
              "<span><b>$attribute:</b> $providers{$ProvID}{$attribute}</span>";
        }
    }
    print "</div>";    # Close Flex item
}

# Show Completion and Performance Rate

print
"<div style='display: flex; flex-direction: row; justify-content: space-between'>Completion and Performance Rate by Provider</div>"
  ;    # Flex item

foreach my $ProvID ( sort keys %providers_rates ) {
    print
"<div style='display: flex; flex-direction: row; justify-content: space-between'>"
      ;    # Flex item
    my $pr_total_pop = $providers_rates{$ProvID}{'total_pop'};
    my $pr_PFMET     = $providers_rates{$ProvID}{'PFMET'};
    my $pr_PFNOTMET  = $providers_rates{$ProvID}{'PFNOTMET'};

    print
"<span><b>Provider:</b> $providers_rates{$ProvID}{'name'}($pr_total_pop) </span>";

    if ( 0 == $pr_total_pop ) {
        $pr_total_pop = 1;
    }

    my $data_completeness_rate =
      ( ( $pr_PFMET + $pr_PFNOTMET ) / $pr_total_pop ) * 100;
    my $performance_rate = ( $pr_PFMET / $pr_total_pop ) * 100;

    $data_completeness_rate = sprintf( "%.2f", $data_completeness_rate );
    $performance_rate       = sprintf( "%.2f", $performance_rate );

    print
"<span><b>Data Completeness Rate:</b> ( MET($pr_PFMET) + NOTMET($pr_PFNOTMET) ) / total($pr_total_pop) ) * 100 = ${data_completeness_rate}% </span>";
    print
"<span><b>Performance Rate:</b> (MET($pr_PFMET)/total($pr_total_pop)) * 100) = ${performance_rate}% </span>";

    print "</div>";    # Close Flex item
}

print "</div>\n";

print $Header;
print $table_header;
print $table_entries;

print qq|\t${rcount}| . "\t" x $numFLDS . "\n";

sub flagCountLabel {
    my ( $type, $val, $max ) = @_;

    my $html =
      $val >= $max
      ? "<p STYLE='background-color: red'> <b>Major Depressive:</b> G8431, ${type} Total of ${val}<BR>screening for clinical depression is documented as being POSITIVE and a follow-up plan is documented</p>"
      : "<p STYLE='background-color: orange'><b>Other Depressive:</b> G8432, ${type} Total of ${val}<BR>screening for clinical depression is documented as being NEGATIVE and a follow-up plan is not required</p>";
    return ($html);
}

sub calcCount    # shaded areas are 2 and 3 values
{
    my ( $rPHQ, $pfx, $beg, $end, $isok ) = @_;

#foreach my $f ( sort keys %{$rPHQ} ) { warn "uCalc-calcCount: rPHQ-$f=$rPHQ->{$f}\n"; }
#warn qq|\nENTER: uCalc-calcCount: beg=${beg}, end=${end}, isok=${isok}\n|;
    my ( $ok, $idx, $cnt ) = ( 0, 0, 0 );

#warn qq|     : uCalc-calcCount: q2a=$rPHQ->{q2a}, q2b=$rPHQ->{q2b}, q2c=$rPHQ->{q2c}\n|;
    for my $i ( $beg .. $end ) {
        $idx++;    # 1st 2 checked or not?
        my $f = $pfx . $i;
        if ( $idx < 3 && $rPHQ->{$f} > 1 ) { $ok++; }

        #warn qq| idx=${idx}, ok=${ok}\n|;
        $cnt++ if ( $rPHQ->{$f} > 1 );

        #warn qq| f=${f}, cnt=${cnt}\n|;
    }
    $cnt++ if ( $rPHQ->{$end} == 1 );    # last question is shaded in 1 value.
    if ( $isok && !$ok ) { $cnt = 0; }

    #warn qq|RETURN: uCalc-calcCount: isok=${isok}, ok=${ok}, cnt=${cnt}\n|;
    return ($cnt);
}

sub calcTotal {
    my ( $rPHQ, $pfx, $beg, $end ) = @_;

#foreach my $f ( sort keys %{$rPHQ} ) { warn "uCalc-calcTotal: rPHQ-$f=$rPHQ->{$f}\n"; }
    my $cnt = 0;
    if ( $beg eq '' || $end eq '' ) {
        $cnt = $rPHQ->{$pfx};
    }    # no loop, just this field (pfx).
    else {
        for my $i ( $beg .. $end ) {

            my $f = $pfx . $i;

            my $f_a = $f . 'a';
            my $f_b = $f . 'b';

            if ( $rPHQ->{$f_a} ne '' ) {
                $cnt += $rPHQ->{$f_a};
            }

            $cnt += $rPHQ->{$f};
        }

    }

    # die qq|pfx=${pfx}, beg=${beg}, end=${end}, cnt=${cnt}\n|;
    return ($cnt);
}

sub checkFollowUpPlan {
    my ($ClientID) = @_;

    $sTRPlan->execute($ClientID);
    my $rTRPlan     = $sTRPlan->fetchrow_hashref;
    my $sTRPlanRows = $sTRPlan->rows;
    if ( $sTRPlanRows > 0 ) {
        return 1;
    }
    return 0;
}

sub updatePFMET {
    my ( $ProvID, $Code ) = @_;
    $providers{$ProvID}{$Code}         += 1;
    $providers_rates{$ProvID}{'PFMET'} += 1;
    $PFMET                             += 1;
}

sub updatePFNOTMET {
    my ( $ProvID, $Code ) = @_;
    $providers{$ProvID}{$Code}            += 1;
    $providers_rates{$ProvID}{'PFNOTMET'} += 1;
    $PFNOTMET                             += 1;
}
$srecord->finish();
$sGCode->finish();
$sPHQ9->finish();
$sPHQ2->finish();
$sPHQ15->finish();
$qClProbs->finish();

myDBI->cleanup();
exit;
############################################################################
