#!/usr/bin/perl
use lib '/var/www/okmis/src/lib';
use DBI;
use myForm;
use myDBI;
use DBA;
use DBUtil;
use Time::Local;
my $DT = localtime();
############################################################################
# usage:
#   MIPS
############################################################################
my $form  = myForm->new();
my $dbh   = myDBI->dbconnect( $form->{'DBNAME'} );
my $debug = $form->{'LOGINPROVID'} == 91 ? 0 : 0;
if ($debug) {
    foreach my $f ( sort keys %{$form} ) { print "form-$f=$form->{$f}\n"; }
}
my $Type = $form->{'Type'};
$form = DBUtil->setDates($form);
my $DateRange = qq|from $form->{FromDateD} thru $form->{ToDateD}|;

my $multidel  = 'ý';
my $ForProvID = $form->{ForProvID} ? $form->{ForProvID} : $form->{LOGINPROVID};

# join xInsurance needed for withSelection
my $withSelection = DBA->withSelection( $form, 'and', 'Client.clinicClinicID',
    'Treatment.ProvID', 'Treatment.ClientID', 'Treatment.TrID' );
my $Header = DBA->withSelectionHeader($form);

#warn qq|Header: ${Header}\n|;
$withSelection .= qq| and Client.Active=1| if ( $form->{Active} );
$QID = qq|QID128|;
$TITLE =
qq|Preventive Care and Screening: Body Mass Index (BMI) Screening and Follow-Up Plan - National Quality Strategy Domain: Community/Population Health - Meaningful Measure Area: Preventive Care|;
my $CTYPE = qq|MIPS CLINICAL QUALITY MEASURES (CQMS)|;
my $MTYPE = qq|Process|;
my $DESC =
qq|Percentage of patients aged 18 years and older with a BMI documented during the current encounter or within the previous twelve months AND who had a follow-up plan documented if most recent BMI was outside of normal parameters|;
my $INST =
qq|There is no diagnosis associated with this measure. This measure is to be submitted a minimum of once per
performance period for patients seen during the performance period. This measure may be submitted by Meritbased Incentive Payment System (MIPS) eligible clinicians who perform the quality actions described in the measure 
based on the services provided at the time of the qualifying visit and the measure-specific denominator coding. The 
BMI may be documented in the medical record of the provider or in outside medical records obtained by the provider. 
If the most recent documented BMI is outside of normal parameters, then a follow-up plan is documented during the 
encounter or during the previous twelve months of the current encounter. The documented follow-up plan must be 
based on the most recent documented BMI outside of normal parameters, example: “Patient referred to nutrition 
counseling for BMI above or below normal parameters” (See Definitions for examples of follow-up plan treatments). If 
more than one BMI is submitted during the measurement period, the most recent BMI will be used to determine if the 
performance has been met. Review the exclusions and exceptions criteria to determine those patients that BMI 
measurement may not be appropriate or necessary.|;
my @FLDS = (
    'ClinicName:ClinicName',           'LName:LastName',
    'FName:FirstName',                 'ClientID:ClientID',
    'DOB:DateOfBirth',                 'Age:Age',
    'Race:Race',                       'pcount:ProbAddr',
    'PrimaryProvider:PrimaryProvider', "Insurance:Insurance",
    "BMI:BMI"
);
my $numFLDS = scalar(@FLDS) - 2;
print qq|numFLDS=${numFLDS}\n| if ($debug);

my $ClientSelection =
  DBA->withSelection( $form, 'and', 'Client.clinicClinicID', 'Client.ProvID' );

# Get the Client

my $sClient = $dbh->prepare(
"SELECT Client.*, ClientVitalSigns.*, xInsurance.Descr as Insurance, ClientEmergency.HospiceCheck
    , Client.LName,Client.FName,Client.ClientID
      ,Clinic.Name as ClinicName
      ,CONCAT(Counselor.LName,', ',Counselor.FName) as PrimaryProvider
      ,xRaces.Descr as Race
      ,Client.DOB,TIMESTAMPDIFF(YEAR, Client.DOB, CURDATE()) AS Age
      ,count(*) as pcount
 FROM Client
    LEFT JOIN ClientEmergency ON Client.ClientID=ClientEmergency.ClientID
    left join ClientACL on ClientACL.ClientID=Client.ClientID
    left join Provider as Counselor on Counselor . ProvID = Client . ProvID
    left join okmis_config . xRaces on xRaces . ID =
  SUBSTRING_INDEX( Client . Race, '${multidel}', 1 )

    left join ClientVitalSigns on ClientVitalSigns.ClientID=Client.ClientID
    left join Provider as Clinic on Clinic . ProvID = Client . clinicClinicID
    left join ClientPrAuth on ClientPrAuth.ClientID=Client.ClientID
    left join Insurance on Insurance.InsNumID=ClientPrAuth.InsuranceID
    left join xInsurance on xInsurance.ID=Insurance.InsID
     WHERE Client.ClientID>100 ${ClientSelection}
     group by Client.LName,Client.FName,Client.ClientID"

);

my ( $Denominator, $total, $PFMET, $DNEXCEPTION, $PFNOTMET, $DNEXCLUDED ) =
  ( 0, 0, 0, 0, 0, 0 );

my $table_header = '';
foreach my $f (@FLDS) {
    my ( $fld, $hdr ) = split( ':', $f );
    $table_header .= qq|${hdr}\t|;
}
$table_header .= qq|\n|;
$table_entries = '';

$form = DBUtil->setDates($form);

my $qTreatment = qq|SELECT * FROM Treatment
    left join xSC on xSC . SCID = Treatment . SCID
    WHERE
    Treatment.ClientID = ? and
    (         Treatment . ContLogDate >= '$form->{FromDate}'
          and Treatment . ContLogDate <= '$form->{ToDate}' )
      and (
           xSC . SCNum = '90791'
        or xSC . SCNum = '90792'
        or xSC . SCNum = '90832'
        or xSC . SCNum = '90834'
        or xSC . SCNum = '90837'
        or xSC . SCNum = '96156'
        or xSC . SCNum = '96158'
        or xSC . SCNum = '97161'
        or xSC . SCNum = '97162'
        or xSC . SCNum = '97163'
        or xSC . SCNum = '97165'
        or xSC . SCNum = '97166'
        or xSC . SCNum = '97167'
        or xSC . SCNum = '97802'
        or xSC . SCNum = '97803'
        or xSC . SCNum = '99202'
        or xSC . SCNum = '99203'
        or xSC . SCNum = '99204'
        or xSC . SCNum = '99205'
        or xSC . SCNum = '99212'
        or xSC . SCNum = '99213'
        or xSC . SCNum = '99214'
        or xSC . SCNum = '99215'
        or xSC . SCNum = '99236'
        or xSC . SCNum = '99304'
        or xSC . SCNum = '99305'
        or xSC . SCNum = '99306'
        or xSC . SCNum = '99307'
        or xSC . SCNum = '99308'
        or xSC . SCNum = '99309'
        or xSC . SCNum = '99310'
        or xSC . SCNum = '99315'
        or xSC . SCNum = '99316'
        or xSC . SCNum = '99318'
        or xSC . SCNum = '99324'
        or xSC . SCNum = '99325'
        or xSC . SCNum = '99326'
        or xSC . SCNum = '99327'
        or xSC . SCNum = '99328'
        or xSC . SCNum = '99334'
        or xSC . SCNum = '99335'
        or xSC . SCNum = '99336'
        or xSC . SCNum = '99337'
        or xSC . SCNum = '99339'
        or xSC . SCNum = '99340'

        or xSC . SCNum LIKE '99385%'
        or xSC . SCNum LIKE '99386%'
        or xSC . SCNum LIKE '99387%'
        or xSC . SCNum LIKE '99395%'
        or xSC . SCNum LIKE '99396%'
        or xSC . SCNum LIKE '99397%'
        or xSC . SCNum LIKE '99401%'
        or xSC
        . SCNum LIKE '99402%'

        or xSC . SCNum = 'G0101'
        or xSC . SCNum = 'G0108'
        or xSC . SCNum = 'G0270'
        or xSC . SCNum = 'G0271'
        or xSC . SCNum = 'G0402'
        or xSC . SCNum = 'G0438'
        or xSC . SCNum = 'G0439'
        or xSC . SCNum = 'G0447'
        or xSC . SCNum = 'G0473'

        or xSC . SCNum = 'D7111'
        or xSC . SCNum = 'D7140'
        or xSC . SCNum = 'D7210'
        or xSC . SCNum = 'D7220'
        or xSC . SCNum = 'D7230'
        or xSC . SCNum = 'D7240'
        or xSC . SCNum = 'D7241'
        or xSC . SCNum = 'D7250'
        or xSC . SCNum = 'D7251'
      )
|;

my $sClientVitalSigns = $dbh->prepare(
    "select * from ClientVitalSigns where ClientID=? and
    (         VDate >= '$form->{FromDate}'
          and VDate <= '$form->{ToDate}' ) order by VDate"
);

$sClient->execute();
while ( my $rClient = $sClient->fetchrow_hashref ) {

    $sTreatment = $dbh->prepare($qTreatment);
    $sTreatment->execute( $rClient->{ClientID} );
    my $rTreatment = $sTreatment->fetchrow_hashref;
    if ( !$rTreatment ) {
        next;
    }
    $Denominator++;
    $rClient->{"BMI"} = "";

    if ( $rClient->{'HospiceCheck'} eq 1 ) {
        $DNEXCLUDED++;
    }
    else {
        my $ClientID = $rClient->{'ClientID'};
        $sClientVitalSigns->execute($ClientID);
        my $rClientVitalSigns = $sClientVitalSigns->fetchrow_hashref;
        if ( !$rClientVitalSigns || $rClientVitalSigns->{'BMI'} eq '' ) {
            $PFNOTMET++;
        }
        else {
            $PFMET++;
            $rClient->{"BMI"} = $rClientVitalSigns->{'BMI'};
        }
    }

    foreach my $f (@FLDS) {
        my ( $fld, $hdr ) = split( ':', $f );
        $table_entries .= qq|$rClient->{$fld}\t|;
    }

    $table_entries .= qq|\n|;

    $total += $rClient->{'pcount'};
}

my $Data_Completeness_Rate;
my $Performance_Rate;

my $Data_Completeness_Numerator =
  $PFMET + $DNEXCEPTION + $PFNOTMET + $DNEXCLUDED;

if ( $Denominator eq 0 ) {

    $Data_Completeness_Rate = 0;
    $Performance_Rate       = 0;

}
else {

    $Data_Completeness_Rate =
      ( $Data_Completeness_Numerator / $Denominator ) * 100;
    if ( $Data_Completeness_Numerator > ( $DNEXCEPTION + $DNEXCLUDED ) ) {
        $Performance_Rate =
          ( $PFMET /
              ( $Data_Completeness_Numerator - $DNEXCLUDED - $DNEXCEPTION ) ) *
          100;
    }
}

$Data_Completeness_Rate = sprintf( "%.2f", $Data_Completeness_Rate );
$Performance_Rate       = sprintf( "%.2f", $Performance_Rate );

my $nom_denom =
qq|Numerator = Denominator Exclusion (${DNEXCLUDED}) + Performance Met (${PFMET}) +  Denominator Exception (${DNEXCEPTION}) +  Performance Not Met (${PFNOTMET})= ${Data_Completeness_Numerator} \n Denominator(Eligible Population) = ${Denominator}\n|;
my $Data_Completeness_Rate_Text =
qq|Data Completeness Rate = Numerator(${Data_Completeness_Numerator}) / Denominator(${Denominator}) = ${Data_Completeness_Rate}% \n|;
my $Performance_Rate_Text =
qq|Performance Rate = Performance Met (${PFMET}) / Numerator(${Data_Completeness_Numerator}) - Denominator Exclusion (${DNEXCLUDED}) - Denominator Exception (${DNEXCEPTION}) = ${Performance_Rate}% \n|;

$Header = qq|${DT}\n${QID} ${TITLE} ${DateRange} ${Header} \n ${nom_denom}|;

print $Header;
print $Data_Completeness_Rate_Text;
print $Performance_Rate_Text;
print $table_header;
print $table_entries;

print qq|${Denominator}| . "\t" x $numFLDS . qq|${total}\n|;

# $srecord->finish();
$sClientVitalSigns->finish();
$sClient->finish();
myDBI->cleanup();
exit;
############################################################################
# where (Client.ClientID=50234 or Client.ClientID=60348 or Client.ClientID=46424 or Client.ClientID=56680 or Client.ClientID=49679)
