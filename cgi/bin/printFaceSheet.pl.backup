#!/usr/bin/perl
############################################################################
use lib '/home/okmis/mis/src/lib';
use myForm;
use myDBI;
use myPDF;
use Config;
use MgrTree;
use DBA;
use cBill;

use PDFlib::PDFlib 9.1;
use strict;
############################################################################

my $form = myForm->new();
my $dbh = myDBI->dbconnect($form->{'DBNAME'});
my $sClient = $dbh->prepare("select * from Client where ClientID=?");
my $sClientIntake = $dbh->prepare("select * from ClientIntake where ClientID=?");
my $sClientReferrals = $dbh->prepare("select * from ClientReferrals where ClientID=?");
# get the last Admission Date...
my $sClientAdmit = $dbh->prepare("select * from ClientAdmit where ClientID=? order by AdmitDate desc");
my $sClientVitalSigns = $dbh->prepare("select * from ClientVitalSigns where ClientID=? order by VDate desc");
my $sClientFamily = $dbh->prepare("select * from ClientFamily where ClientID=? and EmerContact=1");
my $sClientEmergency = $dbh->prepare("select * from ClientEmergency where ClientID=?");
my $sInsurance = $dbh->prepare("
select * from Insurance 
  left join Guarantor on Insurance.InsNumID=Guarantor.InsuranceID
 where Insurance.ClientID=? and Insurance.Priority=? 
 order by Insurance.InsNumEffDate desc, Insurance.InsNumExpDate
");
my $sProvider = $dbh->prepare("select * from Provider where ProvID=?");

#warn qq|printFaceSheet: IDs: $form->{'IDs'}\n|;
my $pdfpath = qq|$form->{'DOCROOT'}/forms/PrintFaceSheet.pdf|;
my $hdrfont = qq|<underline leftindent 0 fontname={Times New Roman Bold} alignment=center encoding=unicode>|;
my $labelfont = qq|<nounderline leftindent 0 fontname={Times New Roman Bold} alignment=left encoding=unicode>|;
my $responsefont = qq|<nounderline leftindent 0 fontname={Arial} fontsize=9 alignment=left encoding=unicode>|;
my $leftindent0 = qq|<leftindent 0>|;
my $leftindent1 = qq|<leftindent 180>|;
my $leftindent2 = qq|<leftindent 360>|;

my $filename = '/tmp/'.$form->{'LOGINID'}.'_'.DBUtil->genToken().'_'.DBUtil->Date('','stamp').'.pdf';
my $outfile = $form->{'file'} eq ''                # create and print pdf else just create.
              ? $form->{'DOCROOT'}.$filename
              : $form->{'file'};
my @pagehandles = ();
my $pageno = 0;
my $objtype; 

eval
{
    my $p = new PDFlib::PDFlib;

    # This means we must check return values of load_font() etc. 
    $p->set_option("errorpolicy=return");

    # all strings are expected as utf8 
    $p->set_option("stringformat=utf8");

#warn qq|create outfile: |.$outfile."\n";
    if ($p->begin_document($outfile,"destination={type=fitwindow} pagelayout=singlepage") == -1)
    { throw new Exception("Error: " . $p->get_errmsg()); }

    $p->set_info("Creator", "Keith Stephenson");
    $p->set_info("Title", "PrintNotes");

    # Open the Block template which contains PDFlib Blocks 
    my $indoc = $p->open_pdi_document($pdfpath, "");
    if ($indoc == -1) { die("Error: " . $p->get_errmsg()); }

    my $no_of_input_pages = $p->pcos_get_number($indoc, "length:pages");
#warn qq|no_of_input_pages: ${no_of_input_pages}\n|;
    # Prepare all pages of the input document. We assume a small
    # number of input pages and a large number of generated output
    # pages. Therefore it makes sense to keep the input pages
    # open instead of opening the pages again for each encounter.
     
    for ($pageno = 1; $pageno <= $no_of_input_pages; $pageno++)
    {
      # Open the first page and clone the page size 
      $pagehandles[$pageno] = $p->open_pdi_page($indoc, $pageno, "cloneboxes");
      if ($pagehandles[$pageno] == -1) { die("Error: " . $p->get_errmsg()); }
    }

    # Duplicate input pages for each encounter and fill Blocks 
    my $cnt = 0;
    foreach my $ClientID ( split(' ',$form->{'IDs'}) )
    {
      $cnt++;
#warn qq|start: ${ClientID}\n|;
      main->printFS($p,$ClientID,$no_of_input_pages,$indoc);
    }
#warn qq|finished: cnt=${cnt}\n|;

    # Close all input pages 
    for ($pageno = 1; $pageno <= $no_of_input_pages; $pageno++)
    { $p->close_pdi_page($pagehandles[$pageno]); }
    $p->close_pdi_document($indoc);

    $p->end_document("");

};
if ($@) { die("$0: PDFlib Exception occurred:\n$@"); }
$sClient->finish();
$sClientIntake->finish();
$sClientReferrals->finish();
$sClientAdmit->finish();
$sClientVitalSigns->finish();
$sClientFamily->finish();
$sClientEmergency->finish();
$sInsurance->finish();
$sProvider->finish();
myDBI->cleanup();
if ( $form->{'file'} eq '' )                # create and print pdf.
{ print qq|Location: ${filename}\n\n|; }
exit;
############################################################################
sub printFS
{
  my ($self,$p,$ClientID,$no_of_input_pages,$indoc) = @_;

  # Option list for text blocks 
  my $optlist = "encoding=winansi embedding";
  my $str;
#warn qq|test ID: |.$ClientID."\n";
  $sClient->execute($ClientID) || myDBI->dberror("printFaceSheet: select Client ${ClientID}");
  if ( my $rClient = $sClient->fetchrow_hashref )
  {
#warn qq|add ID: |.$ClientID."\n";
    $sClientIntake->execute($ClientID) || myDBI->dberror("printFaceSheet: select ClientIntake ${ClientID}");
    my $rClientIntake = $sClientIntake->fetchrow_hashref;
    $sClientReferrals->execute($ClientID) || myDBI->dberror("printFaceSheet: select ClientReferrals ${ClientID}");
    my $rClientReferrals = $sClientReferrals->fetchrow_hashref;
    $sClientAdmit->execute($ClientID) || myDBI->dberror("printFaceSheet: select ClientAdmit ${ClientID}");
    my $rClientAdmit = $sClientAdmit->fetchrow_hashref;
# IntakeProvID
    my $IntakeProvID = $rClientAdmit->{'ProvID'};
    $sProvider->execute($IntakeProvID) || myDBI->dberror("printFaceSheet: select IntakeProvID ${IntakeProvID}");
    my $rIntakeProvider = $sProvider->fetchrow_hashref;
# Set Emergency Information (from Family desinated Emergency member)
    $sClientFamily->execute($ClientID);
    my $rClientEmergency = $sClientFamily->fetchrow_hashref;
# Physician 
    $sClientEmergency->execute($ClientID);
    my $rClientEmergencyCare = $sClientEmergency->fetchrow_hashref;  # NOT rClientEmergency, see above.
    $sClientVitalSigns->execute($ClientID);
    my $rClientVitalSigns = $sClientVitalSigns->fetchrow_hashref;

# KLS
    my $RefSourceID = $rClientReferrals->{'ReferredBy1NPI'};
    my $rReferral = $RefSourceID ? DBA->selxref($form,'xNPI','NPI',$RefSourceID) : ();

    # Loop over all pages of the input document 
    for ($pageno = 1; $pageno <= $no_of_input_pages; $pageno++)
    {
      # Start the next output page. The dummy size will be
      # replaced with the cloned size of the input page.
         
      $p->begin_page_ext(10, 10, "");

      # Place the imported page on the output page, and clone all
      # page boxes which are present in the input page; this will
      # override the dummy size used in begin_page_ext().
         
      $p->fit_pdi_page($pagehandles[$pageno], 0, 0, "cloneboxes");

    # Header info...
      myPDF->setAgency($p,$pagehandles[$pageno],$rClient->{'clinicClinicID'});

      if ($p->fill_textblock($pagehandles[$pageno], 'myTitle', "Client Information", $optlist) == -1)
      { printf("Warning: %s\n", $p->get_errmsg()); }
      my $myText;
      $myText .= qq|${labelfont}REFERRAL SOURCE / REASON \n|;
      $myText .= qq|${labelfont}Referred Date:${responsefont} $rClientReferrals->{'RefDate'}|;
      $myText .= qq|\t${labelfont}Referred By:${responsefont} $rReferral->{'ProvOrgName'} $rReferral->{'ProvPrefix'} $rReferral->{'ProvFirstName'} $rReferral->{'ProvLastName'}|;
      $myText .= qq|\t${labelfont}${leftindent2}Phone:${responsefont} $rReferral->{'WkPh'}\n|;
      $myText .= qq|${labelfont}Reason For Referral:${responsefont}\n|;
      $myText .= qq|${labelfont}${responsefont}$rClientReferrals->{'RefReason'}\n|;

      $myText .= qq|\n${hdrfont}Initial Intake Information|;
      my $admitdate = DBUtil->Date($rClientAdmit->{AdmitDate},'fmt','MM/DD/YYYY');
      my $admittime = substr($rClientAdmit->{AdmitTime},0,5);
      $myText .= qq|\t${labelfont}Intake Date: ${responsefont}${admitdate} @ ${admittime}|;
      (my $staff = qq|$rIntakeProvider->{'Pref'} $rIntakeProvider->{'FName'} $rIntakeProvider->{'LName'}|) =~ s/\d//g;
      $myText .= qq|\t${labelfont}Staff: ${responsefont}${staff}\n|;

      $myText .= qq|\n${labelfont}IDENTIFYING INFORMATION\n|;
      my $name = qq|$rClient->{'LName'}, $rClient->{'FName'} $rClient->{'MName'} (${ClientID})|;
      my $addr = $rClient->{'Addr1'};
      $addr .= $rClient->{'Addr2'} if ( $rClient->{'Addr2'} ne '' );
      $addr .= qq|, $rClient->{'City'}| if ( $rClient->{'City'} ne '' );
      $addr .= qq|, $rClient->{'ST'}| if ( $rClient->{'ST'} ne '' );
      $addr .= qq| $rClient->{'Zip'}| if ( $rClient->{'Zip'} ne '' );
      my $age = DBUtil->Date($rClient->{'DOB'},'age');
      my $dob = DBUtil->Date($rClient->{'DOB'},'fmt','MM/DD/YYYY');
      $myText .= qq|${labelfont}Name: ${responsefont}${name}\n|;
      $myText .= qq|${labelfont}Address: ${responsefont}${addr}\n|;
      $myText .= qq|${labelfont}Home Phone: ${responsefont}$rClient->{'HmPh'}|;
      $myText .= qq|${labelfont}${leftindent1}Work Phone: ${responsefont}$rClient->{'WkPh'}|;
      $myText .= qq|${labelfont}${leftindent2}Email: ${responsefont}\t$rClient->{'Email'}\n|;
      $myText .= qq|${labelfont}Place of Birth: ${responsefont}$rClientIntake->{'POB'}|;
      $myText .= qq|${labelfont}${leftindent1}SSN: ${responsefont}$rClient->{'SSN'}|;
      $myText .= qq|${labelfont}${leftindent2}DOB: ${responsefont}${dob}\n|;
      my $weight = qq|$rClientVitalSigns->{'Weight'} lbs|;
      my $height = qq|$rClientVitalSigns->{'HeightFeet'} ft. $rClientVitalSigns->{'HeightInches'} in.|;
      $myText .= qq|${labelfont}Height: ${responsefont}${height}|;
      $myText .= qq|${labelfont}${leftindent1}Weight: ${responsefont}${weight}|;
      $myText .= qq|${labelfont}${leftindent2}Age: ${responsefont} ${age}  |;
      $myText .= qq|${labelfont}Gender: ${responsefont}$rClient->{'Gend'}\n|;

      $myText .= qq|\n${labelfont}GUARANTOR INFORMATION\n|;
      my $rGuarantor = ();
      $sInsurance->execute($ClientID,1);
      if ( my $rInsurance = $sInsurance->fetchrow_hashref )
      {
        $rGuarantor = $rInsurance->{'ClientRel'} eq 'I' || $rInsurance->{'ClientRel'} eq '' ? $rClient : $rInsurance;
        my $gtorname = qq|$rGuarantor->{'FName'} $rGuarantor->{'LName'}|;
        my $gtoraddr = $rGuarantor->{'Addr1'};
        $gtoraddr .= $rGuarantor->{'Addr2'} if ( $rGuarantor->{'Addr2'} ne '' );
        $gtoraddr .= qq|, $rGuarantor->{'City'}| if ( $rGuarantor->{'City'} ne '' );
        $gtoraddr .= qq|, $rGuarantor->{'ST'}| if ( $rGuarantor->{'ST'} ne '' );
        $gtoraddr .= qq| $rGuarantor->{'Zip'}| if ( $rGuarantor->{'Zip'} ne '' );
        my $gtorwkph = $rGuarantor->{'WkPh'};
        my $gtorage = DBUtil->Date($rGuarantor->{'DOB'},'age');
        my $gtordob = DBUtil->Date($rGuarantor->{'DOB'},'fmt','MM/DD/YYYY');

        $myText .= qq|${labelfont}Name: ${responsefont}${gtorname}\n|;
        $myText .= qq|${labelfont}Address: ${responsefont}${gtoraddr}\n|;
        $myText .= qq|${labelfont}Home Phone: ${responsefont}$rGuarantor->{'HmPh'}|;
        $myText .= qq|${labelfont}${leftindent1}Work Phone: ${responsefont}$rGuarantor->{'WkPh'}|;
        $myText .= qq|${labelfont}${leftindent2}Email: ${responsefont}\t$rGuarantor->{'Email'}\n|;
        $myText .= qq|${labelfont}Employer: ${responsefont}$rGuarantor->{'Empl'}|;
        $myText .= qq|${labelfont}${leftindent1}SSN: ${responsefont}$rGuarantor->{'SSN'}|;
        $myText .= qq|${labelfont}${leftindent2}DOB: ${responsefont}${gtordob}\n|;
     }
     else
     { $myText .= qq|${labelfont}No Primary Insurance reported.\n|; }

      my $emername = qq|$rClientEmergency->{'FName'} $rClientEmergency->{'LName'}|;
      my $emeraddr = $rClientEmergency->{'Addr1'};
      $emeraddr .= $rClientEmergency->{'Addr2'} if ( $rClientEmergency->{'Addr2'} ne '' );
      $emeraddr .= qq|, $rClientEmergency->{'City'}| if ( $rClientEmergency->{'City'} ne '' );
      $emeraddr .= qq|, $rClientEmergency->{'ST'}| if ( $rClientEmergency->{'ST'} ne '' );
      $emeraddr .= qq| $rClientEmergency->{'Zip'}| if ( $rClientEmergency->{'Zip'} ne '' );
      my $emerwkph = $rClientEmergency->{'WkPh'};
      my $erelation = DBA->getxref($form,'xRelationship',$rClientEmergency->{'Rel'},'Descr');
      $myText .= qq|\n${labelfont}IN CASE OF AN EMERGENCY (Parent/Guarantor if client is under 18 or under legal guardianship)\n|;
      $myText .= qq|${labelfont}Name: ${responsefont}${emername} |;
      $myText .= qq|\t${labelfont}${leftindent2}Phone: ${responsefont}${emerwkph} \n|;
      $myText .= qq|${labelfont}Address: ${responsefont}${emeraddr} \n|;
      $myText .= qq|${labelfont}Relationship: ${responsefont}${erelation}|;
      $myText .= qq|\t${labelfont}${leftindent1}Special Instructions: ${responsefont}$rClientEmergency->{'Comments'}\n|;

      $myText .= qq|\n${hdrfont}Health Care Information / Resources\n|;
      my $PhysNPI = $rClientEmergencyCare->{'PhysNPI'};
      my $physname = '';
      my $physaddr = '';
      my $physwkph = '';
      if ( $PhysNPI eq '' )
      {
        $physname = qq|No Primary Care Physician reported by Client.|;
        $physaddr = qq|A list of Primary Care Physician was given to Client.|;
      }
      else
      {
        my $rPhysician = DBA->selxref($form,'xNPI','NPI',$PhysNPI);
        $physname = qq|$rPhysician->{'ProvPrefix'} $rPhysician->{'ProvFirstName'} $rPhysician->{'ProvLastName'}|;
        $physaddr = $rPhysician->{'Addr1'};
        $physaddr .= $rPhysician->{'Addr2'} if ( $rPhysician->{'Addr2'} ne '' );
        $physaddr .= qq|, $rPhysician->{'City'}| if ( $rPhysician->{'City'} ne '' );
        $physaddr .= qq|, $rPhysician->{'ST'}| if ( $rPhysician->{'ST'} ne '' );
        $physaddr .= qq| $rPhysician->{'Zip'}| if ( $rPhysician->{'Zip'} ne '' );
        $physwkph = $rPhysician->{'WkPh'};
      }
      $myText .= qq|\n${labelfont}Primary Care Physician: ${responsefont}${physname}|;
      $myText .= qq|\t${labelfont}${leftindent2}Phone: ${responsefont}${physwkph}\n|;
      $myText .= qq|${labelfont}Address: ${responsefont}${physaddr}\n|;
      #$myText .= qq|\t${labelfont}City: ${responsefont}|;
      #$myText .= qq|\t${labelfont}State: ${responsefont}|;
      #$myText .= qq|\t${labelfont}Zip: ${responsefont}\n|;

      my $HospNPI = $rClientEmergencyCare->{'DesigHospNPI'};
      my $hospname = '';
      my $hospaddr = '';
      my $hospwkph = '';
      if ( $HospNPI eq '' )
      {
        $hospname = qq|No Designated Hospital reported by Client.|;
        $hospaddr = qq|A list of Hospitals was given to Client.|;
      }
      else
      {
        my $rHospital = DBA->selxref($form,'xNPI','NPI',$HospNPI);
        $hospname = $rHospital->{'ProvOrgName'};
        $hospaddr = $rHospital->{'Addr1'};
        $hospaddr .= $rHospital->{'Addr2'} if ( $rHospital->{'Addr2'} ne '' );
        $hospaddr .= qq|, $rHospital->{'City'}| if ( $rHospital->{'City'} ne '' );
        $hospaddr .= qq|, $rHospital->{'ST'}| if ( $rHospital->{'ST'} ne '' );
        $hospaddr .= qq| $rHospital->{'Zip'}| if ( $rHospital->{'Zip'} ne '' );
        $hospwkph = $rHospital->{'WkPh'};
      }
      $myText .= qq|\n${labelfont}Hospital: ${responsefont}${hospname}|;
      $myText .= qq|\t${labelfont}${leftindent2}Phone: ${responsefont}${hospwkph}\n|;
      $myText .= qq|${labelfont}Address: ${responsefont}${hospaddr}\n|;
      #$myText .= qq|\t${labelfont}City: ${responsefont}|;
      #$myText .= qq|\t${labelfont}State: ${responsefont}|;
      #$myText .= qq|\t${labelfont}Zip: ${responsefont}\n|;
      my @Ins = ();
      for (my $Priority = 1; $Priority <= 3; $Priority++)
      {
#warn qq|ClientID=${ClientID}, Priority=${Priority}\n|;
        $sInsurance->execute($ClientID,$Priority);
        if ( my $rInsurance = $sInsurance->fetchrow_hashref )
        {
#foreach my $f ( sort keys %{$rInsurance} ) { warn ": rInsurance-$f=$rInsurance->{$f}\n"; }
          $Ins[$Priority][1] = DBA->getxref($form,'xInsurance',$rInsurance->{'InsID'},'Name');
          $Ins[$Priority][2] = $rInsurance->{'InsIDNum'};
          $Ins[$Priority][3] = $rInsurance->{'ClientRel'} eq '' || $rInsurance->{'ClientRel'} eq 'I'
                             ? qq|self| : qq|$rInsurance->{'FName'} $rInsurance->{'MName'} $rInsurance->{'LName'}|;
        }
#warn qq|Ins=$Ins[$Priority][1]\n|;
      }
      $myText .= qq|\n${hdrfont}Insurance\n|;
      $myText .= qq|\n${labelfont}Primary: ${responsefont}$Ins[1][1]|;
      $myText .= qq|${labelfont}${leftindent1}Secondary: ${responsefont}$Ins[2][1] |;
      $myText .= qq|${labelfont}${leftindent2}Tertiary: ${responsefont}$Ins[3][1]\n|;
      $myText .= qq|${labelfont}Policy Number: ${responsefont}$Ins[1][2]|;
      $myText .= qq|${labelfont}${leftindent1}Policy Number: ${responsefont}$Ins[2][2]|;
      $myText .= qq|${labelfont}${leftindent2}Policy Number: ${responsefont}$Ins[3][2]\n|;
      $myText .= qq|${labelfont}Policy Holder: ${responsefont}$Ins[1][3]|;
      $myText .= qq|${labelfont}${leftindent1}Policy Holder: ${responsefont}$Ins[2][3]|;
      $myText .= qq|${labelfont}${leftindent2}Policy Holder: ${responsefont}$Ins[3][3]\n|;

    # Body text...
      if ($p->fill_textblock($pagehandles[$pageno], 'myText', $myText, $optlist) == -1)
      { printf("Warning: %s\n", $p->get_errmsg()); }

    # Footer info...
      myPDF->setConf($p,$pagehandles[$pageno]);
        
      $p->end_page_ext("");
    }
  }
  else
  {
#warn qq|skip ID: |.$ClientID."\n";
    # Loop over all pages of the input document 
    for ($pageno = 1; $pageno <= $no_of_input_pages; $pageno++)
    {
      $p->begin_page_ext(10, 10, "");
      $p->fit_pdi_page($pagehandles[$pageno], 0, 0, "cloneboxes");
      $str = qq|ClientID: ${ClientID} NOT FOUND!.\n|;
      if ($p->fill_textblock($pagehandles[$pageno], 'agencyinfo', $str, $optlist) == -1)
      { printf("Warning: %s\n", $p->get_errmsg()); }
      $p->end_page_ext("");
    }
  }
  return();
}
############################################################################
