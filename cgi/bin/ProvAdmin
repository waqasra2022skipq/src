#!/usr/bin/perl
use lib 'C:/xampp/htdocs/src/lib';
use DBI;
use DBForm;
use DBA;
use myHTML;
use gHTML;
use SysAccess;

############################################################################
my $form = DBForm->new();
my $dbh  = $form->dbconnect();

#foreach my $f ( sort keys %{$form} ) { warn "setTriggers: form-$f=$form->{$f}\n"; }
if ( !$form->{Provider_ProvID} ) {
    $form->error("Provider Privileges Page / denied ProvID NULL");
}
if ( !SysAccess->verify( $form, 'hasProviderAccess' ) ) {
    $form->error("Provider Privileges Page / denied Provider Access)");
}
if ( !SysAccess->verify( $form, 'Privilege=ProviderPrivs' ) ) {
    $form->error("Provider Privileges Page / denied Access");
}

############################################################################
my $Agent = SysAccess->verify( $form, 'Privilege=Agent' );
warn qq|setTriggers: Agent=${Agent}\n|;

my $html   = '';
my $ProvID = $form->{'Provider_ProvID'};

# get this Provider Name...
my $sProvider = $dbh->prepare("select * from Provider where ProvID=?");
$sProvider->execute($ProvID)
  || $form->dberror("setTriggers: select Provider ${ProvID}");
my $rProvider = $sProvider->fetchrow_hashref;

my $sProviders =
  $dbh->prepare("select * from Provider where Type='4' order by LName,FName");
if   ( $form->{submit} ) { $html = main->submit(); }
else                     { $html = main->html(); }
$sProvider->finish();
$sProviders->finish();
$form->complete();
print $html;
exit;

############################################################################
sub submit {
    my $list = ();

    # before we delete look for Agent...
    if ( !$Agent )    # did not put them on the screen to select
    {                 # so keep them checked
        my $sAgent = $dbh->prepare(
"select ProviderPrivs.ProvID,ProviderPrivs.Type from ProviderPrivs left join okmis_config.xPrivileges on xPrivileges.ID=ProviderPrivs.Type where ProviderPrivs.ProvID=? and xPrivileges.Category='Agent'"
        );
        $sAgent->execute($ProvID)
          || $form->dberror(
            "setTriggers: select ProviderPrivs Agent ${ProvID}");
        while ( my $r = $sAgent->fetchrow_hashref ) {
            my $id = $r->{'Type'};
            $list->{$id} = 'CHECKED';
        }
        $sAgent->finish();
    }

    # first remove existing ones...
    my $sDelete =
      $dbh->prepare("delete from ProviderPrivs where ProvID='${ProvID}'");
    $sDelete->execute() || $form->dberror("delete ProviderPrivs ${ProvID}");
    $sDelete->finish();
    warn qq|update....ProvID=${ProvID}\n|;

    # first remove existing ones...
    my $cdbh         = $form->connectdb('okmis_config');
    my $sxPrivileges = $cdbh->prepare("select * from xPrivileges");
    $sxPrivileges->execute()
      || $form->dberror("setTriggers: select xPrivileges");
    while ( my $r = $sxPrivileges->fetchrow_hashref ) {
        my $id = $r->{'ID'};
        if ( $form->{$id} ) {
            warn qq|reset....${id}\n|;
            my $rProviderPrivs = ();
            $rProviderPrivs->{'CreateProvID'} = $form->{'LOGINPROVID'};
            $rProviderPrivs->{'CreateDate'}   = $form->{'TODAY'};
            $rProviderPrivs->{'ChangeProvID'} = $form->{'LOGINPROVID'};
            $rProviderPrivs->{'ChangeDate'}   = $form->{'TODAY'};
            $rProviderPrivs->{'ProvID'}       = $ProvID;
            $rProviderPrivs->{'Type'}         = $id;
            $rProviderPrivs->{'Rank'}         = 1;

#foreach my $f ( sort keys %{$rProviderPrivs} ) { warn "setTriggers: rProviderPrivs-$f=$rProviderPrivs->{$f}\n"; }
            my $Insert =
              DBA->genInsert( $form, 'ProviderPrivs', $rProviderPrivs );
            my $sql = $dbh->prepare($Insert);
            $sql->execute() || $form->dberror($Insert);
            my $NEWID = $sql->{'mysql_insertid'};
            $sql->finish();
        }
    }
    $sxPrivileges->finish();

    # add back in Agent if this person (LOGINPROVID) is not an Agent
    foreach my $id ( sort keys %{$list} ) {
        warn qq|reset: Agent: ...${id}\n|;
        my $rProviderPrivs = ();
        $rProviderPrivs->{'CreateProvID'} = $form->{'LOGINPROVID'};
        $rProviderPrivs->{'CreateDate'}   = $form->{'TODAY'};
        $rProviderPrivs->{'ChangeProvID'} = $form->{'LOGINPROVID'};
        $rProviderPrivs->{'ChangeDate'}   = $form->{'TODAY'};
        $rProviderPrivs->{'ProvID'}       = $ProvID;
        $rProviderPrivs->{'Type'}         = $id;
        $rProviderPrivs->{'Rank'}         = 1;

#foreach my $f ( sort keys %{$rProviderPrivs} ) { warn "setTriggers Agent: rProviderPrivs-$f=$rProviderPrivs->{$f}\n"; }
        my $Insert = DBA->genInsert( $form, 'ProviderPrivs', $rProviderPrivs );
        my $sql    = $dbh->prepare($Insert);
        $sql->execute() || $form->dberror($Insert);
        my $NEWID = $sql->{'mysql_insertid'};
        $sql->finish();
    }
    $cdbh->disconnect();

#DBA->setAlert($form,"Privileges set for: <BR>$rProvider->{FName} $rProvider->{LName}.<BR>Window will close in 1 minute.");
    my $html = myHTML->newHTML(
        $form,
        'Authorize Privileges',
        "CheckPopupWindow noclock countdown_1"
      )
      . qq|
<BODY>
<FIELDSET>
  <LEGEND>
  Privileges set for: <BR>$rProvider->{FName} $rProvider->{LName}
  </LEGEND>
<INPUT TYPE="button" NAME="cancel" VALUE="close" ONCLICK="javascript: window.close()" >
</FIELDSET>
</BODY>
</HTML>
|;
    return ($html);
}

sub html {
    my ($self) = @_;
    my $ppp, $cnt = 0;
    $sProviders->execute() || $form->dberror("setTriggers: select Providers ");
    while ( my $r = $sProviders->fetchrow_hashref ) {
        $cnt++;
        my $linecolor = 'rptodd';
        if ( int( $cnt / 2 ) == $cnt / 2 ) { $linecolor = 'rpteven'; }
        $ppp .= qq|
  <DIV CLASS="${linecolor}" >
    <INPUT TYPE="checkbox" ID="$r->{ProvID}" NAME="ProviderSelected_$r->{ProvID}" VALUE="1" >
    $r->{'ProvID'}: $r->{'LName'}, $r->{'FName'}
  </DIV>
|;
    }

    # set the 'checked' list for setCheckColumns...
    my $list = ();
    $sProvider->execute($ProvID)
      || $form->dberror("setTriggers: select Provider ${ProvID}");
    while ( my $r = $sProvider->fetchrow_hashref ) {
        my $id = $r->{'Type'};
        $list->{$id} = 'CHECKED';
    }
    my @TabList = ();
    my @TabHdrs = ();
    my $thistab = qq|
  <DIV CLASS="blackonwhite txtleft" >
    <div data-role="header">
      <h1 CLASS="txtcenter" >TRIGGERS</h1>
    </div>
    <div data-role="main" class="ui-content">
      <p>Two-column Layout:</p> |
      . myHTML->setCheckColumns( $form, 'xTriggers', $list,
        'Available Triggers' )
      . qq|
    </div>
  </DIV>
  <DIV CLASS="blackonwhite txtright" >
    <INPUT TYPE="submit" ONCLICK="return validate(this.form);" NAME="submit" VALUE="Update" >
  </DIV>
  <INPUT TYPE="hidden" NAME="Provider_ProvID" VALUE="${ProvID}" >
  <INPUT TYPE="hidden" NAME="mlt" VALUE="$form->{mlt}" >
</FORM>
|;
    push( @TabHdrs, "Decision Support Rules" );
    push( @TabList, $thistab );
    push( @TabHdrs, "Privileges" );
    push( @TabList, '<P CLASS="blackonwhite" >Privileges in development</P>' );
    my $tabs    = 'yes';
    my $thebody = $thistab;

    if ( $tabs =~ /yes/i ) {
        my @Tabs = ();
        for ( $c = 0 ; $c <= $#TabHdrs ; $c++ ) {
            my $tab        = $TabList[$c];
            my $tabcontent = $TabHdrs[$c] . chr(253) . $tab;

            #warn qq|\n\nc=$c\ntabcontent=$tabcontent\n|;
            push( @Tabs, $tabcontent );
        }
        $thebody = gHTML->setTab( '', '', @Tabs );
    }

    # Start out the display.
    my $MAINHDR = qq|Authorize Provider Privileges and Access|;
    my $SUBHDR1 = qq|$rProvider->{FName} $rProvider->{LName}|;
    my $html    = myHTML->newHTML(
        $form,
        'Authorize Privileges',
        "CheckPopupWindow noclock countdown_10 usetabs"
      )
      . qq|
<LINK REL="STYLESHEET" TYPE="text/css" HREF="/cfg/mis.css" />
<LINK REL="STYLESHEET" TYPE="text/css" HREF="/cfg/simplegrid.css" />
<FORM NAME="submit" ACTION="/cgi/bin/setTriggers.cgi" METHOD="POST">
<DIV CLASS="blackonwhite" >
<div CLASS="blackonwhite txtleft" STYLE="overflow-y:scroll; overflow-x:hidden; height:200px;" >
${ppp}
</div>
|
      . $thebody . qq| 

</DIV>
    </TD>
  </TR>
</TABLE>
  <SCRIPT LANGUAGE="JavaScript">
    document.submit.elements[0].focus();
  </SCRIPT>
</BODY>
</HTML>
|;
    return ($html);
}
############################################################################
