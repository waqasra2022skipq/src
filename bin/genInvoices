#!/usr/bin/perl
use lib '/var/www/okmis/src/lib';
use DBI;
use DBForm;
use cBill;
############################################################################
# select the outstanding (with AmtDue and Reconciled) notes to invoice
# from GenInvoices - select all Clients
# from the html ListInvoices.cgi
#   select the Generate New Invoice button
#   and it runs the /cgi/bin/genInvoices.cgi
#   which runs this routine
############################################################################
# DOCUMENT TO HESK
# I change the Generate Invoices to include the denials.
# So currently it will select the (Inprocess and private/group) or Reconciled or Denied.
# That means the notes will have to be worked before generating invoices to
# 1) scholarship those with amtdue like the $3 left over after payment or
# 2) to rebill the denied notes that should not be on the invoices.

# Should be documented in our help desk at some point.
############################################################################
$form = DBForm->new();
$dbh  = $form->dbconnect();
my $InvDate = $form->{TODAY};
$InvDate = $form->{InvDate} if ( $form->{InvDate} );
my $ClientID = $form->{ClientID};
############################################################################
# selects Notes outstanding where...
#  AmtDue and Reconciled or (InProcess and Private Pay)
############################################################################
my $add =
  $form->{'DBNAME'} eq 'okmis_gpr'
  ? qq| and Treatment.BillDate < '${InvDate}'|
  : '';
my $with  = $ClientID eq 'all' ? '' : qq|and Treatment.ClientID='${ClientID}'|;
my $where = qq|
 from Treatment
  left join xSC on xSC.SCID=Treatment.SCID
  left join xInsurance on xInsurance.ID=xSC.InsID
 where Treatment.AmtDue>0
   and Treatment.BillDate>'2012-03-01'
   and ((Treatment.BillStatus=3 and (xInsurance.InsType='group' or xInsurance.InsType='private')) or
         Treatment.BillStatus=5 or Treatment.BillStatus=6)
${add}
|;

my $qClients = qq|select ClientID,ProvID ${where} ${with} group by ClientID|;

#warn qq|qClients=\n$qClients\n|;
my $sClients = $dbh->prepare($qClients);
my $qNote =
qq|select Treatment.* ${where} and Treatment.ClientID=? order by Treatment.ContLogDate, Treatment.ContLogBegTime|;

#warn qq|qNote=\n$qNote\n|;
my $sNote = $dbh->prepare($qNote);
my $qAddInv =
qq|insert into Invoices (ClientID,InvDate,CreateProvID,CreateDate,ChangeProvID) values (?,?,?,?,?)|;
my $sAddInv = $dbh->prepare($qAddInv);
my $qAddInvItems =
qq|insert into InvItems (InvID,ClientID,TrID,ContDate,SCNum,Descr,Units,BillAmt,InsCode,PaidAmt,PaidDate,AmtDue,CreateProvID,CreateDate,ChangeProvID) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)|;
my $sAddInvItems = $dbh->prepare($qAddInvItems);
my $qUpdInvoices = qq|update Invoices set TotalAmt=? where ID=?|;
my $sUpdInvoices = $dbh->prepare($qUpdInvoices);

############################################################################
# add Invoice for Clients.
my $cnt = 0;
$sClients->execute();
while ( my $rClient = $sClients->fetchrow_hashref ) {

    #  if ( SysAccess->getRule($form,'GenerateInvoices',$rClient->{ProvID}) )
    #  {
    $cnt++;
    $sAddInv->execute(
        $rClient->{ClientID}, $InvDate, $form->{LOGINPROVID},
        $form->{TODAY},       $form->{LOGINPROVID}
    );
    my $NEWID  = $sAddInv->{'mysql_insertid'};
    my $InvAmt = main->genItems( $rClient->{'ClientID'}, $NEWID );
    $sUpdInvoices->execute( $InvAmt, $NEWID );
    print qq|Invoice # ${NEWID} added: total: ${InvAmt} <BR>|;

#  }
#  else
#  { print qq|Generate Invoice TURNED OFF for Agency: ProvID/ClientID: $rClient->{'ProvID'}/$rClient->{'ClientID'}\n|; }
}
print qq|${cnt} Invoices created |;

$sClients->finish();
$sNote->finish();
$sAddInv->finish();
$sAddInvItems->finish();
$sUpdInvoices->finish();
$form->complete();
exit;
############################################################################
sub genItems {
    my ( $self, $ClientID, $InvID ) = @_;
    my $TotalCharge = 0;
    $sNote->execute($ClientID) || $form->dberror($qNote);
    while ( my $rNote = $sNote->fetchrow_hashref ) {
        my $rxSC = cBill->getServiceCode(
            $form,                    $rNote->{SCID},
            $rNote->{ContLogDate},    $rNote->{ContLogBegTime},
            $rNote->{ContLogEndTime}, $rNote->{TrID},
            $rNote->{BillDate}
        );
        my $PaidDate =
          $rNote->{RecDate} ? $rNote->{RecDate} : $rNote->{COPLDate};
        $sAddInvItems->execute(
            $InvID,               $ClientID,
            $rNote->{TrID},       $rNote->{ContLogDate},
            $rxSC->{SCNum},       $rxSC->{SCName},
            $rxSC->{Units},       $rNote->{BilledAmt},
            $rxSC->{InsCode},     $rxSC->{RecAmt},
            $PaidDate,            $rNote->{AmtDue},
            $form->{LOGINPROVID}, $form->{TODAY},
            $form->{LOGINPROVID}
        );
        $TotalCharge += $rNote->{AmtDue};
        print qq|TrID: $rNote->{TrID} for $rNote->{AmtDue} <BR>|;
    }
    return ($TotalCharge);
}
############################################################################
