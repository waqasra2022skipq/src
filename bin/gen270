#!/usr/bin/perl
use lib '/home/okmis/mis/src/lib';
use DBI;
use myForm;
use myDBI;
use DBA;
use DBUtil;
use cBill;
use Time::Local;
use FileHandle;
my $DT=localtime();
my ($sec, $min, $hrs, $day, $month, $year, $wday, $julian) = localtime();
############################################################################
# usage: gen270 DBNAME=mms\&InsDescr=medicaid\&InsCode=MB\&EDate=yyyy-mm-dd
#               InsDescr is who 270 is for (OHCA)
#               InsCode defaults to 'InsDescr' or enter a different one
#               EDate is for month in this date
############################################################################
# Initilization section
##
my $form = myForm->new();
my $dbh = myDBI->dbconnect($form->{'DBNAME'});
my $ForProvID = $form->{ForProvID} ? $form->{ForProvID} : $form->{LOGINPROVID};

############################################################################
$s=$dbh->prepare("select * from Provider where Type=3");
  $s->execute();
  while (my $r = $s->fetchrow_hashref) { $ClinicList{$r->{ProvID}} = $r; }
$s=$dbh->prepare("select * from Provider where Type=4");
  $s->execute();
  while (my $r = $s->fetchrow_hashref) { $ProviderList{$r->{ProvID}} = $r; }
$s->finish();

my $qInsurance = qq|
select * from Insurance 
  left join xInsurance on xInsurance.ID=Insurance.InsID
  where Insurance.ClientID=? and Insurance.Priority=1
  order by Insurance.InsNumEffDate desc
|;
$sInsurance = $dbh->prepare($qInsurance);

#my $BCN = myDBI->getIDX('270');     # Batch Control Number
# report goes in the billing directory.
my $genfile = $form->{DBNAME} . '.' . $form->{InsDescr} . '.270'; 
open X12, ">${genfile}" or die "Couldn't open 'GEN 270' file: $!"; 

print qq|Eligibility Inqury for $form->{TODAY} ($form->{DBNAME})\n|;
#############################################################################
# Static variables for Submitter / Receiver
##
##
my ($SubName, $SubID, $SubContact, $SubAddr, $SubCity, $SubST, $SubZip, $SubZip4, $SubPh) = 
   ('MILLENNIUM INFORMATION SYSTEMS',
    '500000008',
    'KEITH STEPHENSON',
    '4001 KNIGHTS BRIDGE',
    'NORMAN', 'OK', 73069, '', 
    '4056416109'
   );

my $Version = '005010X279A1';
##
# Info must be 10 characters long
##
my $AuthInfoQ = '00';                 # No Authorization Information Present (No Meaningful Information in I02)
my $AuthInfo = '          ';
my $SecuInfoQ = '00';                 # No Security Information Present (No Meaningful Information in I04
my $SecuInfo = '          ';
my ($SubID, $FmtSubID, $RecID, $FmtRecID) = ('','','','');
my ($RecName, $InsCode, $ISASQ, $ISARQ) = ('','','ZZ','ZZ');
$sIns = $dbh->prepare("select * from xInsurance where xInsurance.Descr='$form->{InsDescr}'");
$sIns->execute();
if ( $rxInsurance = $sIns->fetchrow_hashref )
{
  if ( $rxInsurance->{ISASQ} eq '' )
  { warn qq|!$form->{InsDescr}: NO SUBMITTER Interchange ID Qualifier!\n|; }
  if ( $rxInsurance->{SubID} eq '' )
  { warn qq|!$form->{InsDescr}: NO SUBMITTER ID!\n|; }
  if ( $rxInsurance->{ISARQ} eq '' )
  { warn qq|!$form->{InsDescr}: NO RECEIVER Interchange ID Qualifier!\n|; }
  if ( $rxInsurance->{RecName} eq '' )
  { warn qq|!$form->{InsDescr}: NO RECEIVER NAME!\n|; }
  if ( $rxInsurance->{RecID} eq '' )
  { warn qq|!$form->{InsDescr}: NO RECEIVER TAXID!\n|; }
  if ( $rxInsurance->{InsCode} eq '' )
  { warn qq|!$form->{InsDescr}: NO INSURANCE CODE!\n|; }
  $ISASQ = DBUtil->FmtStr($rxInsurance->{ISASQ},2,'L');
  $SubID = $rxInsurance->{SubID};                            # no spaces
  $FmtSubID = DBUtil->FmtStr($SubID,15,'L');                 # fixed length with spaces
  $ISARQ = DBUtil->FmtStr($rxInsurance->{ISARQ},2,'L');
  ($RecID = $rxInsurance->{RecID}) =~ s/[- ]//g;
  $FmtRecID = DBUtil->FmtStr($RecID,15,'L');
  $RecName = DBUtil->FmtStr($rxInsurance->{RecName},35,'L');
  if ( $form->{InsCode} )                                    # if one's given
  { $InsCode = DBUtil->FmtStr($form->{InsCode},2,'L'); }
  else
  { $InsCode = DBUtil->FmtStr($rxInsurance->{InsCode},2,'L'); }
}
else
{
  warn qq|INSURANCE $form->{InsDescr} NOT FOUND!\n|;
  myDBI->cleanup();
  exit;
}
$sIns->finish();
#print qq|Rec=$RecName, $RecID\n|;
if ( $form->{InsDescr} eq 'tricare' )
{
  $AuthInfoQ = '03';                        # Additional Data Identification
  $AuthInfo = DBUtil->FmtStr($SubID,10,'L');
}

my $ICNFLAG = 'P';                          # P=Production, T=Testing
my ($Eof, $Eol) = ("*","~\n");              # End Of Field, End Of Line
my $ICN = '000000270';                      # Interchange Control Number
my $GCN = '000000270';                      # Group Control Number
my $SCN = '000000270';                      # Segment Control Number
my $RunDate = DBUtil->Date('today','fmt', 'YYMMDD');
my $RunDateY = DBUtil->Date('today','fmt', 'YYYYMMDD');
$hrs = pad0s($hrs, 2);
$min = pad0s($min, 2);
my $RunTime = $hrs . $min;
my $EligibleDate = $form->{'EDate'} ? $form->{'EDate'} : DBUtil->Date('today',0,11);
($FromDate, $ToDate) = DBUtil->Date($EligibleDate,'monthly',0);
($tFromDate = ${FromDate}) =~ s/-//g;
($tToDate = ${ToDate}) =~ s/-//g;

open RANGEFILE, ">daterange.out" or die "Couldn't open 'daterange.out' file: $!"; 
print RANGEFILE "${FromDate}\n${ToDate}\n";
close(RANGEFILE);

print qq|EligibleDate=$EligibleDate, FromDate=$FromDate, tFromDate=$tFromDate, ToDate=$ToDate, tToDate=$tToDate\n|;

#############################################################################
# Begin - Display header
##
$SubName = DBUtil->FmtStr($SubName, 31, 'L');
$SubAddr = DBUtil->FmtStr($SubAddr, 31, 'L');
$SubCSZ = qq|${SubCity} ${SubST} ${SubZip}|;
$SubCSZ = DBUtil->FmtStr($SubCSZ, 31, 'L');
my $GrandText = qq|
${DT}
${InsName} Eligibility Inquiry
RECIEVER:\t${RecName}\tTAX ID: ${RecID}\tIns Code: ${InsCode}
SUBMITTED BY:\t${SubName}\tCLAIM TYPE :1500/PHY
             \t${SubAddr}
             \t${SubCSZ}\tSUB ID: ${SubID}

PROVIDER...\tSERVICES...\tPROVIDER...\tPROVIDER.......................
NUMBER.....\tSUBMITTED..\tTOTAL......\tNAME...........................\tSUBID..........
|;

##
# set our counters
##
my $ErrorHeader = 0;             # Output Error Header
my $SubCount = 0;                # Count of Submitter (1)
my $DocsPerSub = 0;              # Count of documents for Submitter
my $RecsPerSub = 0;              # Count of records for Submitter
my $ProvCount = 0;               # Count of Provider/Clinics Processed 
my $HL01 = 0;                    # Forward Reference counter through HL records
my $HL02 = '';                   # Backward Reference counter through HL records

##
# -- Interchange Header (Submitter) --
##
$SubCount += 1;
my ($cnt, $out) = Interchange_Header();
$TotalRecords = $cnt;            # Total records in file.

##
# START THE SHOW. Process Providers/Clinics; select all Clinics
my $q = qq|
  select xInsurance.Descr, Provider.Name
        ,ProviderControl.NPI, Contracts.InsID, Contracts.TaxID
        ,Provider.ProvID, Provider.Addr1, Provider.Addr2
        ,Provider.City, Provider.ST, Provider.Zip
  from Contracts
    left join Provider on Provider.ProvID=Contracts.ProvID
    left join ProviderControl on ProviderControl.ProvID=Contracts.ProvID
    left join xInsurance on xInsurance.ID=Contracts.InsID
  where xInsurance.Descr='$form->{InsDescr}' and Provider.Active=1
  order by xInsurance.Descr, Provider.Name
|;
#warn "sClinics=$q\n";
$sClinics = $dbh->prepare($q);
$sClinics->execute();
while ( $rClinics = $sClinics->fetchrow_hashref )
{
  $HL01 = 0;                    # Forward Reference counter through HL records
  $HL02 = '';                   # Backward Reference counter through HL records
  $DocsPerProv = 0;             # Count of documents for Provider/Clinic
  $RecsPerProv = 0;             # Count of records for Provider/Clinic
  $rows = 0;
  $errors = '';
  $ClinicID=$rClinics->{ProvID};
  $NPI=$rClinics->{NPI};
  $ClinicInsID=$rClinics->{InsID};
  print qq|Process: $rClinics->{Descr},${NPI},$rClinics->{Name} (${ClinicInsID})\n|;
  next if ( $NPI eq '' || $ClinicInsID eq '' );
  ($tClinicTaxID = $rClinics->{TaxID}) =~ s/[- ]//g;
  ##
  # select Clients...
  ##
  my $q = qq|
select * 
  from Client
   left join Insurance on Insurance.ClientID=Client.ClientID
  where Client.Active=1 and InsID=$rClinics->{InsID} and Client.clinicClinicID=$rClinics->{ProvID}
  group by Client.LName, Client.FName, Insurance.InsIDNum
  order by Client.LName, Client.FName, Insurance.InsIDNum
|;
#warn "sClient=$q\n";
  $sClient = $dbh->prepare($q);
  $sClient->execute();
  while ( $rClient = $sClient->fetchrow_hashref )
  {
#warn "Client=$rClient->{ClientID}, $rClient->{LName}, $rClient->{FName}, $rClient->{SSN}\n";
    #print qq|  Client: $rClient->{ClientID},$rClient->{LName},$rClient->{FName}\n|;
    ($code,$msg) = cBill->CheckClient($form,$rClient->{ClientID});
    if ( $code == 0 )
    {
      $rows++;
      $DocsPerProv++;
      &NewClient();
    }
    else { $errors .= qq|!! $msg\t$rClient->{FName}\t$rClient->{LName}\t$rClient->{ClientID}\t$ProviderList{$rClient->{ProvID}}{FName}\t$ProviderList{$rClient->{ProvID}}{LName}\n|; }
  }
#warn "\n";
  next if ( $rows == 0 );

  ##
  # Print out the totals.
  ##
  if ( $RecsPerProv > 0 )
  {
    $ProvCount += 1;
    # -- Provider Footer --
    my ($cnt, $str) = Provider_Footer();
    $out .= $str; 
    print X12 $out; $out = '';
    $GrandText .= qq|$rClinics->{NPI}\t${DocsPerProv}\t${RecsPerProv}\t$rClinics->{Name}\t${SubID}\n${errors}|;
    $DocsPerSub += $DocsPerProv;
    $RecsPerSub += $RecsPerProv;
  }
  $sClient->finish();
}
$sClinics->finish();
##
# -- Interchange Footer --
##
($cnt, $str) = Interchange_Footer();
$TotalRecords += $RecsPerSub + $cnt;
$out .= $str; 
print X12 $out; $out = '';
close(X12);
$GrandText .= qq|\nGRAND TOTALS:\t${DocsPerSub}\t${RecsPerSub}\t${TotalRecords}\n|;
##
# select Clients without a Clinic Assigned...
##
my $q = qq|select * from Client where Client.Active=1 and Client.clinicClinicID is null order by Client.LName, Client.FName|;
#warn "sClient=$q\n";
$sClient = $dbh->prepare($q);
$sClient->execute();
while ( $rClient = $sClient->fetchrow_hashref )
{
  $GrandText .= qq|CLINIC NULL\t$rClient->{FName}\t$rClient->{LName}\t$rClient->{ClientID}\t$ProviderList{$rClient->{ProvID}}{FName}\t$ProviderList{$rClient->{ProvID}}{LName}\t$rClient->{ProvID}\n|;
}
$sClient->finish();
print $GrandText . "\n";
#open OUT, ">${genfile}.out" or die "Couldn't open 'OUT' file: $!";
#print OUT qq|${GrandText}\n|;
#close(OUT);
#warn "Client=$rClient->{ClientID}, $rClient->{LName}, $rClient->{FName}, $rClient->{SSN}\n";
myDBI->cleanup();
exit;
#############################################################################
sub NewClient()
{
#warn "  NewClient:\n";
                              # Check for New Provider started
                              # we don't want to put it out until we 
  if ( $RecsPerProv == 0 )    #know we have claims for this Provider/Clinic
  {
#warn "  start Transaction: \n";
    # -- Transaction Header (Provider) --
    my ($cnt, $str) = Transaction_Header();
    $out .= $str; 
    $RecsPerProv += $cnt;
#    # -- Submitter Header (Provider) --
#    my ($cnt, $str) = Submitter_Header();
#    $out .= $str; 
#    $RecsPerProv += $cnt;
    # -- Receiver Header (Provider) --
    my ($cnt, $str) = Source_Header();
    $out .= $str; 
    $RecsPerProv += $cnt;
    # -- Provider Header (Provider) --
    my ($cnt, $str) = Provider_Header();
    $out .= $str; 
    $RecsPerProv += $cnt;
  }

  $ClientTotal = 0;
  ($ClientSSN = $rClient->{SSN}) =~ s/[- ]//g;
  $ClientDOB = DBUtil->Date($rClient->{DOB},'fmt','YYYYMMDD');

  # -- Client Header --
  my ($cnt, $str) = Client_Request();
  $out .= $str; 
#warn "      NewClient: Client_Request=$str\n";
  $RecsPerProv += $cnt;

#warn "  END NewClient: $rClient->{FName} $rClient->{LName} ($rClient->{ClientID})\n";
  return(1);
}
#############################################################################
sub Interchange_Header
{
#  $tSubID = DBUtil->FmtStr($SubID, 15, 'L');
#  $fRecID = DBUtil->FmtStr($tRecID, 15, 'L');
#  my $str = qq|ISA*00*${AuthInfo}*00*${SecuInfo}*ZZ*${tSubID}*ZZ*${fRecID}*${RunDate}*${RunTime}*U*00401*${ICN}*0*P*:${Eol}|;
#  my $str = qq|ISA*${AuthInfoQ}*${AuthInfo}*00*${SecuInfo}*ZZ*${FmtSubID}*${ISAQ}*${FmtRecID}*${RunDate}*${RunTime}*U*00401*${ICN}*0*${ICNFLAG}*:${Eol}|;
  my $str = qq|ISA*${AuthInfoQ}*${AuthInfo}*${SecuInfoQ}*${SecuInfo}*${ISASQ}*${FmtSubID}*${ISARQ}*${FmtRecID}*${RunDate}*${RunTime}*^*00501*${ICN}*0*${ICNFLAG}*:${Eol}|;
#  $str .= qq|GS*HS*${SubID}*${tRecID}*${RunDateY}*${RunTime}*${GCN}*X*004010X092A1${Eol}|;
  $str .= qq|GS*HS*${SubID}*${RecID}*${RunDateY}*${RunTime}*${GCN}*X*${Version}${Eol}|;
  return(2,$str);
}
sub Interchange_Footer
{
  my $str = qq|GE*${ProvCount}*${GCN}${Eol}|;
  $str .= qq|IEA*${SubCount}*${ICN}${Eol}|;
  return(2,$str);
}

sub Transaction_Header
{
  $SCN = myDBI->getIDX('270');
  $SCN = DBUtil->FmtStr($SCN, 9, 'R', '0');
  my $str = qq|ST*270*${SCN}*${Version}${Eol}|;                                 # start Segment
  $str .= qq|BHT*0022*13*${BCN}*${RunDateY}*${RunTime}${Eol}|;
  return(2,$str);
}

sub Submitter_Header
{
  my $str = qq|HL*${HL01}*${HL02}*20*1${Eol}|;
  $str .= qq|NM1*41*2*${SubName}*****46*${SubID}${Eol}|;
  $str .= qq|PER*IC*${SubContact}*TE*${SubPh}${Eol}|;
  return(3,$str);
}

sub Source_Header
{
  $HL01++;
  my $str = qq|HL*${HL01}*${HL02}*20*1${Eol}|;
  $str .= qq|NM1*PR*2*${RecName}*****FI*${RecID}${Eol}|;
  $HL02 = $HL01;
  return(2,$str);
}

# called Receiver also
sub Provider_Header
{
  $HL01++;
  my $str = qq|HL*${HL01}*${HL02}*21*1${Eol}|;
  my $tClinicName = uc $rClinics->{Name};
  $str .= qq|NM1*1P*2*${tClinicName}*****XX*$rClinics->{NPI}${Eol}|;
  $HL02 = $HL01;
  return(2,$str);
}
sub Provider_Footer
{
  $RecsPerProv++;          # count the SE itself.
  my $str = qq|SE*${RecsPerProv}*${SCN}${Eol}|;
  return(1,$str);
}

sub Client_Request
{
  $HL01++;
  my $str = qq|HL*${HL01}*${HL02}*22*0${Eol}|;
#warn qq|$rClient->{ClientID}, $rClient->{LName}, $rClient->{FName}\n|;
  $str .= qq|TRN*1*$rClient->{ClientID}*1${tClinicTaxID}*$rClient->{ProvID}${Eol}|;
  my $cnt = 2;
  ($tClientFName,$rest) = split(/ /,$rClient->{FName});
  ($tClientLName,$rest) = split(/ /,$rClient->{LName});
  ($tClientMName,$rest) = split(/ /,$rClient->{MName});
  (my $tClientFName = uc $tClientFName) =~ s/\W//;
  (my $tClientLName = uc $tClientLName) =~ s/\W//;
  (my $tClientMName = uc $tClientMName) =~ s/\W//;

  $sInsurance->execute($rClient->{ClientID});
  my $rInsurance = $sInsurance->fetchrow_hashref;
# Change to use Client primary insurance code??
#   we get back MB and MC if MC requested to OHCA.
  my $ClientInsCode = $rInsurance->{InsCode} ? $rInsurance->{InsCode} : $InsCode;
#warn qq|$rInsurance->{ID}, $rInsurance->{Descr}, $rInsurance->{InsIDNum}\n|;
  if ( $rInsurance->{Descr} =~ /medicaid/i && 
     ( $rInsurance->{InsIDNum} =~ /^B\d{8}$/ || $rInsurance->{InsIDNum} =~ /^\d{9}$/ ) )
  {
    $str .= qq|NM1*IL*1*${tClientLName}*${tClientFName}*${tClientMName}***MI*$rInsurance->{InsIDNum}${Eol}|;
    $str .= qq|DTP*291*RD8*${tFromDate}-${tToDate}${Eol}|;
    $cnt += 2;
  }
  else
  {
    $str .= $tClientMName ? qq|NM1*IL*1*${tClientLName}*${tClientFName}*${tClientMName}${Eol}|
                          : qq|NM1*IL*1*${tClientLName}*${tClientFName}${Eol}|;
    $str .= qq|REF*SY*${ClientSSN}${Eol}|;
    $str .= qq|DMG*D8*${ClientDOB}*$rClient->{Gend}${Eol}|;
    $str .= qq|DTP*291*RD8*${tFromDate}-${tToDate}${Eol}|;
    $cnt += 4;
  }
  #$str .= qq|EQ*30**IND*${InsCode}${Eol}|; $cnt++;
  $str .= qq|EQ*30${Eol}|; $cnt++;
  $sInsurance->finish();
  return($cnt,$str);
}

#############################################################################
sub pad0s($$)
{
  my ($Num, $Width) = @_;
  $Num = length $Num < $Width ? '0' x ($Width - length $Num) . $Num : $Num;
  return $Num;
}
#############################################################################
