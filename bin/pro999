#!/usr/bin/perl
############################################################################
use lib 'C:/xampp/htdocs/src/lib';
use DBI;
use myForm;
use myDBI;
use utils;

#use myConfig;

############################################################################
my $form  = myForm->new();
my $dbh   = myDBI->dbconnect( $form->{'DBNAME'} );
my $debug = $form->{'debug'};

if ($debug) {
    foreach my $f ( sort keys %{$form} ) {
        print "pro999: form-$f=$form->{$f}\n";
    }
}
print
  qq|ENTER: pro999, DBNAME=$form->{'DBNAME'}, filepath=$form->{'filepath'}\n|
  if ($debug);

my $filepath = $form->{'filepath'};
my ( $directory, $filename ) = $filepath =~ m#((?:[^/]*/)*)(.*)#;
my ( $pfx, $TransID, $SubID, $SentType, $sfx ) = split( '\.', $filename, 5 );
my ( $rptDir, $rptFile, $rptPath ) = ( "$form->{DOCROOT}/reports4", "", "" );
my ( $SegNo, $thisSEGMENT, $RecType, $rest, $LineCount ) =
  ( '', '', '', '', 0 );
my ( $AK2, $IK3, $IK4, $CTX, $IK5 ) = ( '', '', '', '', '' );
my ( $outtext, $ErrorMessage ) = ( '', '' );

$outtext .= localtime() . "\n";
print qq|open: ${filepath}\n| if ($debug);

exit if ( $debug == 2 );

############################################################################
while ( my $line = utils->readFILE( $filepath, '~' ) ) {
    print qq|main: line=$line\n| if ($debug);
    chomp($line);
    $LineCnt += 1;
    while ($line) {
        ( $RecType, $rest ) = split( '\*', $line, 2 );
        if ( $RecType eq 'ISA' ) {
            $line = main->Process_ISA( $RecType, $rest );
        }
        else {
            ( $tst = $line ) =~ s/ //g;    # handle blank lines at end of file.
            print qq|>>> ERROR: Main: UNRECOGNIZED! ${line}\n|
              if ( $tst ne '' );
            $line = '';
        }
    }
}

#my $BACKDIR = myConfig->cfg('BACKDIR');
#my $bakfile = "${BACKDIR}/835/${filename}";
#print qq|  move ${filename} to ${bakfile}...\n|;
#move($filepath,$bakfile) or print ">>>ERROR: move failed: $!";;

print $ErrorMessage. "\n"
  . $outtext
  . $ErrorMessage . "\n"
  . localtime() . "\n\n";
myDBI->cleanup();
exit;
################################################################
# got here with an 'ISA' RecType
sub Process_ISA {
    my ( $self, $Type, $str ) = @_;

    $thisSEGMENT .= "ISA*" . $str . "\n";    # put the ISA* back together.
    my ( $Code, $SenderID, $ReceiverID, $Date, $Time, $rest ) =
      split( '\*', $str, 6 );
    ( $RecID = $SenderID ) =~ s/^\s*(.*?)\s*$/$1/g;    # trim spaces.
    print "Process_ISA: str=${str}\n"     if ($debug);
    print "........ISA: RecID=${RecID}\n" if ($debug);
    while ( my $isa = utils->readFILE( $filepath, '~' ) ) {
        chomp($isa);
        $LineCnt += 1;
        $thisSEGMENT .= $isa . "\n";                   # save ISA segment.
        while ($isa) {
            print "Process_ISA: isa=$isa\n" if ($debug);
            my ( $RecType, $rest ) = split( '\*', $isa, 2 );
            if ( $RecType eq 'GS' ) {
                $isa = main->Process_GS( $RecType, $rest );
            }
            elsif ( $RecType eq 'ST' ) {
                $isa = main->Process_ST( $RecType, $rest );
            }
            elsif ( $RecType eq 'AK1' ) {
                $isa = main->Process_AK1( $RecType, $rest );
            }
            elsif ( $RecType eq 'AK2' ) {
                $isa = main->Process_AK2( $RecType, $rest );
            }
            elsif ( $RecType eq 'AK9' ) {
                $isa = main->Process_AK9( $RecType, $rest );
            }
            elsif ( $RecType eq 'SE' ) {
                $isa    = main->Process_SE( $RecType, $rest );
                $dumpit = 1;
            }
            elsif ( $RecType eq 'GE' ) {
                $isa = main->Process_GE( $RecType, $rest );
            }
            elsif ( $RecType eq 'IEA' ) {
                $isa = main->Process_IEA( $RecType, $rest );
                return ();
            }    # stop
            else {
                print qq|>>> ERROR: Process_ISA: UNRECOGNIZED! ${isa}\n|;
                $isa = '';
            }
        }
    }
    print qq|>>> ERROR: Process_ISA: ERROR! PREMATURE END! ${isa}\n|;
    return ('ERROR');
}

# got here with an 'GS' RecType
sub Process_GS {
    my ( $self, $Type, $str ) = @_;
    my ( $GS_Code, $GS_SenderID, $GS_ReceiverID, $GS_Date, $GS_Time, $rest ) =
      split( '\*', $str, 6 );
    ( $RecID = $GS_SenderID ) =~ s/^\s*(.*?)\s*$/$1/g;    # trim spaces.
    print
"Process_GS: str=$str, $GS_Code, $GS_SenderID, $GS_ReceiverID\nProcess_GS: RecID is=$RecID\n"
      if ($debug);
    return ('');
}

# got here with an 'ST' RecType
sub Process_ST {
    my ( $self, $Type, $str ) = @_;
    my ( $ST_Code, $ST_Count, $ST_File, $rest ) = split( '\*', $str, 4 );
    $TheRemitFile = $ST_File;    # set the original file from Insurance for EFT
    return ('');
}
################################################################
# got here with an 'AK1' RecType
sub Process_AK1 {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $rest ) = split( '\*', $str, 4 );
    print qq|AK1: ($Code,$Count,$File,$rest)\n| if ($debug);
    return ('');
}

# got here with an 'AK2' RecType
sub Process_AK2 {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $rest ) = split( '\*', $str, 4 );
    print qq|AK2: ($Code,$Count,$File,$rest)\n| if ($debug);
    ( $AK2, $IK3, $IK4, $CTX, $IK5 ) = ( "Segment: ${Count} ", '', '', '', '' );
    $SegNo = $Count;    # save in global variable
    while ( my $ak2 = utils->readFILE( $filepath, '~' ) ) {
        chomp($ak2);
        $LineCnt += 1;
        $thisSEGMENT .= $ak2 . "\n";    # save AK2 segment.
        while ($ak2) {
            print "Process_AK2: isa=$ak2\n" if ($debug);
            my ( $RecType, $rest ) = split( '\*', $ak2, 2 );
            if ( $RecType eq 'IK3' ) {
                $ak2 = main->Process_IK3( $RecType, $rest );
            }
            elsif ( $RecType eq 'CTX' ) {
                $ak2 = main->Process_CTX( $RecType, $rest );
            }
            elsif ( $RecType eq 'IK4' ) {
                $ak2 = main->Process_IK4( $RecType, $rest );
            }
            elsif ( $RecType eq 'IK5' ) {
                $ak2 = main->Process_IK5( $RecType, $rest );
            }
            else { return ($ak2); }    # unrecognized; pop out
            return ('ERROR')
              if ( $ak2 eq 'ERROR' );   # return if sub-process returned 'ERROR'
        }
    }
    print qq|>>> ERROR: Process_AK2: ERROR! PREMATURE END! ${ak2}\n|;
    return ('ERROR');
}

#IK3*NM1*1693*2310*8
#CTX*CLM01:3595
#IK4*9**6*1556802794
# got here with an 'IK3' RecType
sub Process_IK3 {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $rest ) = split( '\*', $str, 4 );
    print qq|IK3: ($Code,$Count,$File,$rest)\n| if ($debug);
    $IK3 = qq|Code=${Code}, Count=${Count}, File=${File}|;
    $IK3 = 'IK3: ' . $str . ' ';
    return ('');
}

# got here with an 'CTX' RecType
sub Process_CTX {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $rest ) = split( '\*', $str, 4 );
    print qq|CTX: ($Code,$Count,$File,$rest)\n| if ($debug);
    $CTX = qq|Code=${Code}, Count=${Count}, File=${File}|;
    $CTX = 'CTX: ' . $str . ' ';
    return ('');
}

# got here with an 'IK4' RecType
sub Process_IK4 {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $NPI, $rest ) = split( '\*', $str, 5 );
    print qq|IK4: ($Code,$Count,$File,$rest)\n| if ($debug);
    $IK4 = qq|Code=${Code}, Count=${Count}, File=${File}, NPI=${NPI}|;
    $IK4 = 'IK4: ' . $str . ' ';
    return ('');
}

# got here with an 'IK5' RecType
sub Process_IK5 {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $rest ) = split( '\*', $str, 4 );
    print qq|IK5: ($Code,$Count,$File,$rest)\n| if ($debug);
    my $IK5 =
        $Code eq 'A' ? 'Accepted '
      : $Code eq 'R' ? 'Rejected '
      :                'Unknown ';
    $outtext .= $AK2 . $IK5;
    $outtext .= $IK3 if ( $IK3 ne '' );
    $outtext .= $CTX if ( $CTX ne '' );
    $outtext .= $IK4 if ( $IK4 ne '' );
    $outtext .= "\n";

    if ( $Code eq 'R' && $ErrorMessage eq '' ) {
        $ErrorMessage = qq|
>>>ERROR
Call OHCA EDI (405-522-6205,#,1,200129170*21,,2,2) with the transaction ID: ${TransID}
>>>ERROR
Segment ${SegNo} HAS BEEN REJECTED!
|;
    }
    elsif ( $Code eq 'R' ) {
        $ErrorMessage .= qq|Segment ${SegNo} HAS BEEN REJECTED!\n|;
    }
    return ('');
}

# got here with an 'AK9' RecType
sub Process_AK9 {
    my ( $self, $Type, $str ) = @_;
    my ( $Code, $Count, $File, $rest ) = split( '\*', $str, 4 );
    print qq|AK9: ($Code,$Count,$File,$rest)\n| if ($debug);
    return ('');
}
################################################################
# got here with an 'SE' RecType
sub Process_SE {
    my ( $self,        $Type,    $str )  = @_;
    my ( $SE_Segments, $SE_TSCN, $rest ) = split( '\*', $str, 3 );
    print "Process_SE: ENTER: str=$str\n" if ($debug);
    ( my $Date = $TheDate ) =~ s/(\d{4}?)(\d{2}?)(\d{2}?)/$2\/$3\/$1/;
    return ('');
}

# got here with an 'GE' RecType
sub Process_GE {
    my ( $self,        $Type,    $str )  = @_;
    my ( $GE_Segments, $GE_TSCN, $rest ) = split( '\*', $str, 3 );
    print "Process_GE: ENTER: str=$str\n" if ($debug);
    return ('');
}

# got here with an 'IEA' RecType
sub Process_IEA {
    my ( $self,     $Type, $str )  = @_;
    my ( $Segments, $TSCN, $rest ) = split( '\*', $str, 3 );
    print "Process_IEA: ENTER: str=$str\n" if ($debug);
    return ('');
}
################################################################
sub dumpSE {
    my ($self) = @_;
    my $out = $thisSEGMENT . $SE;
    while ( my $dump = <FILE> ) {
        $out .= $dump;
        my ( $RecType, $rest ) = split( '\*', $dump, 2 );
        if ( $RecType eq 'SE' ) {
            $out .= qq|GE*DUMP\nIEA*DUMP\n|;    # finish it with dummies.
            my $stamp = DBUtil->Date( '', 'stamp' );
            open DUMP, ">pro999.dump.${stamp}"
              || die "Couldn't open DUMP file pro999.dump.${stamp}: $!";
            print DUMP $out;
            close(DUMP);
            print qq| >>> DUMP: pro999.dump.${stamp}\n>>>CHECK FILE!\n\n|;
            last;
        }
    }
    $SE = '';
    return ($dump);
}
################################################################
