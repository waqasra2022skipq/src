#!/usr/bin/perl
############################################################################
use lib 'C:/xampp/htdocs/src/lib';
use DBI;
use myForm;
use myDBI;

############################################################################
# Manual Reconcile of Health Home denied notes.
#   ./recHealthHome DBNAME=db&ClientID=clientid
############################################################################
my $form  = myForm->new();
my $dbh   = myDBI->dbconnect( $form->{'DBNAME'} );
my $cdbh  = myDBI->dbconnect('okmis_config');
my $debug = $form->{'debug'};

if ($debug) {
    foreach my $f ( sort keys %{$form} ) {
        print "recHealthHome: form-$f=$form->{$f}\n";
    }
}

print qq|ENTER: recHealthHome, DBNAME=$form->{'DBNAME'}\n| if ($debug);

my $cnt = 0;
print qq|\nrecHealthHome Started: | . localtime() . qq|\n|;

exit if ( $debug == 2 );

my $sPADates = $dbh->prepare( "
select PALines.BegDate,PALines.EndDate,ClientPrAuth.PAgroup
 from PALines
  left join ClientPrAuth on ClientPrAuth.ID=PALines.PrAuthID
  left join ClientPrAuthCDC on ClientPrAuthCDC.ClientPrAuthID=ClientPrAuth.ID
  left join Insurance on Insurance.InsNumID=ClientPrAuth.InsuranceID
 where PALines.ClientID=?
   and (PALines.BegDate<=? and PALines.EndDate>=?)
   and Insurance.InsID=356
   and ClientPrAuthCDC.Status='Approved'
 order by PALines.BegDate
" );
my $sxPAgroups = $cdbh->prepare("select * from xPAgroups where ID=?");
my $sOnHold =
  $dbh->prepare("update Treatment set BillStatus=8, StatusMsg=? where TrID=?");
my $with =
  $form->{'ClientID'} ? qq| and Treatment.ClientID=$form->{'ClientID'}| : '';

# select those notes for HealthHome insurance and Denied
#  (add also AmtDue because sometimes the code Rate=0 or no Units)
#  (these with AmtDue=0 will just HANG as Denied)
$qNote .= qq|
select * from Treatment
  left join xSC on xSC.SCID=Treatment.SCID
 where xSC.InsID=356 and Treatment.BillStatus=6 and Treatment.AmtDue>0
 ${with}
 order by Treatment.ContLogDate
|;
print "qNote=\n$qNote\n" if ($debug);
my $sNote = $dbh->prepare($qNote);
$sNote->execute() || myDBI->dberror($qNotes);
while ( my $rNote = $sNote->fetchrow_hashref ) {
    print
qq|\nProcess: $rNote->{'ClientID'}/$rNote->{'TrID'}/$rNote->{'SCNum'}/$rNote->{'ContLogDate'}\n|
      if ($debug);
    print
qq|         $rNote->{'BillStatus'}/$rNote->{'BilledAmt'}/$rNote->{'AmtDue'}\n|
      if ($debug);
    if ($debug) {
        foreach my $f ( sort keys %{$rNote} ) {
            print "rNote: $f=$rNote->{$f}\n";
        }
    }
    my $overCAP = main->chkCAP( $form, $rNote );
    print qq|overCAP=${overCAP}\n| if ($debug);
    next                           if ($overCAP);
    print qq|RECONCILE NOTE...\n|  if ($debug);

    #last if ( $cnt == 10 );

    my $InsCode = 'MC';
    my $Code    = 'AR';
    my $SRC     = 'HH';
    my $RefID   = 'HHContract';

    # create a NoteTrans record...
    my $r = ();
    $r->{'TrID'}     = $rNote->{'TrID'};
    $r->{'ClientID'} = $rNote->{'ClientID'};
    $r->{'ContDate'} = $rNote->{'ContLogDate'};
    $r->{'BillDate'} = $rNote->{'BillDate'};
    $r->{'SCID'}     = $rNote->{'SCID'};
    $r->{'SCNum'}    = $rNote->{'SCNum'};
    $r->{'InsCode'}  = $InsCode;
    $r->{'BillAmt'}  = $rNote->{'BilledAmt'};
    $r->{'Units'}    = $rNote->{'Units'};
    $r->{'Code'}     = 'BI';
    $r->{'SRC'}      = $SRC;

    #foreach my $f ( sort keys %{$r} ) { print "r: $f=$r->{$f}\n"; }
    my $TransID =
      DBA->doUpdate( $form, 'NoteTrans', $r );    # insert the record (no where)

    my $r835 = ();
    $r835->{'TransID'}  = $TransID;
    $r835->{'ClientID'} = $rNote->{'ClientID'};
    $r835->{'ContDate'} = $rNote->{'ContLogDate'};
    $r835->{'ServCode'} = $rNote->{'SCNum'};
    $r835->{'RecDate'}  = $form->{'TODAY'};
    $r835->{'InsCode'}  = $InsCode;
    $r835->{'BillAmt'}  = $rNote->{'BilledAmt'};
    $r835->{'PaidAmt'}  = $rNote->{'BilledAmt'};
    $r835->{'Units'}    = $rNote->{'Units'};
    $r835->{'RefID'}    = $RefID;

    #foreach my $f ( sort keys %{$r835} ) { print "r835: $f=$r835->{$f}\n"; }
    my ( $TrID, $SCID, $code, $type ) =
      uBill->postClaim( $form, $r835, $SRC, $Code );
    $cnt++;
}
$sNote->finish();
$sPADates->finish();
$sxPAgroups->finish();
$sOnHold->finish();
myDBI->cleanup();
print qq|count=${cnt}\n|;
print qq|recHealthHome Completed: | . localtime() . qq|\n\n|;
exit;
############################################################################
sub chkCAP {
    my ( $self, $form, $r ) = @_;
    my $ClientID  = $r->{'ClientID'};
    my $TrID      = $r->{'TrID'};
    my $SCNum     = $r->{'SCNum'};
    my $ContDate  = $r->{'ContLogDate'};
    my $BilledAmt = $r->{'BilledAmt'};
    my $overCAP   = 0;
    print
qq|chkCAP: ClientID=${ClientID}, TrID=${TrID}, ContDate=${ContDate}, SCNum=${SCNum}, BilledAmt=${BilledAmt}\n|
      if ($debug);
    $sPADates->execute( $ClientID, $ContDate, $ContDate )
      || myDBI->dberror("chkCAP: select PALines ${ClientID} ${ContDate}");

    if ( my ( $FromDate, $ToDate, $PAgroup ) = $sPADates->fetchrow_array ) {
        $sxPAgroups->execute($PAgroup)
          || myDBI->dberror("chkCAP: select xPAgroups ${PAgroup}");
        my $rxPAgroups = $sxPAgroups->fetchrow_hashref;

        # Adult or Child PrAuth?
        my $CAP =
            $rxPAgroups->{'AdultAmt'} == 0
          ? $rxPAgroups->{'ChildAmt'}
          : $rxPAgroups->{'AdultAmt'};
        my $SCIDs = qq|and ( |;
        my $conj  = '';
        foreach my $scid ( split( chr(253), $rxPAgroups->{SCIDs} ) ) {
            $SCIDs .= qq|${conj}Treatment.SCID='${scid}'|;
            $conj = ' or ';
        }
        $SCIDs .= qq| )|;
        print qq|SCIDs = ${SCIDs}\n| if ($debug);
        my $sPaid = $dbh->prepare( "
select * from Treatment
  left join xSC on xSC.SCID=Treatment.SCID 
 where Treatment.ClientID=? 
   and (Treatment.ContLogDate>=? and Treatment.ContLogDate<=?)
   and (Treatment.BillStatus=4 or Treatment.BillStatus=5)
   ${SCIDs}
 order by Treatment.ContLogDate
" );

        print
qq|chkCAP:  PA: ContDate=${ContDate}, FromDate=${FromDate}, ToDate=${ToDate}\n|
          if ($debug);

        print
qq|PROCESS: $r->{'TrID'}/$r->{'ContLogDate'}/$r->{'SCNum'}/$r->{'SCID'}/$r->{'BilledAmt'}/$r->{'IncAmt'}\n|
          if ($debug);
        $sPaid->execute( $ClientID, $FromDate, $ToDate )
          || myDBI->dberror(
            "chkCAP: select Treatment ${ClientID} ${FromDate} ${ToDate}");
        my $rows = $sPaid->rows;
        print qq|rows = ${rows}\n| if ($debug);
        my $TotalPaid  = 0;
        my $OtherNotes = '';

# IncAmt is the income (RecAmt[PaidAmt from NoteTrans] - SchAmt[Scholarshipped PaidAmt from NoteTrans])
        while ( my $rPaid = $sPaid->fetchrow_hashref ) {
            $TotalPaid += $rPaid->{'IncAmt'};
            $OtherNotes .= qq|$rPaid->{'TrID'}/|;
            print
qq|Found Note:   $rPaid->{'TrID'}/$rPaid->{'ContLogDate'}/$rPaid->{'SCNum'}/$rPaid->{'SCID'}/$rPaid->{'BilledAmt'}/$rPaid->{'IncAmt'}\n|
              if ($debug);
        }

        print qq|TotalPaid = ${TotalPaid}\n| if ($debug);

        $TotalPaid += $BilledAmt;

        print qq|BilledAmt = ${BilledAmt}\n| if ($debug);
        print qq|TotalPaid = ${TotalPaid}\n| if ($debug);
        print qq|CAP = ${CAP}\n|             if ($debug);

        if ( $TotalPaid > $CAP ) {
            $sOnHold->execute( "Note ABOVE CAP", $TrID )
              || myDBI->dberror("chkCAP: update OnHold ABOVE ${TrID}");
            $overCAP = 1;    # don't reconcile.
            print qq|chkCAP: $r->{'ClientID'}/$r->{'TrID'}/${BilledAmt}\n|;
            print
qq|        ABOVE CAP: ${TotalPaid} greater than ${CAP} (OtherNotes: ${OtherNotes})\n|;
            print qq|        $r->{'SCNum'}/$r->{'ContLogDate'}\n|;
            print
qq|        $r->{'BillStatus'}/$r->{'SCNum'}/$r->{'ContLogDate'}/$r->{'AmtDue'}\n|;
        }
        else {
            print
qq|chkCAP: $r->{'TrID'}/${BilledAmt} BELOW CAP: ${TotalPaid} less than ${CAP} (OtherNotes: ${OtherNotes})\n|
              if ($debug);
            $overCAP = 0;    # reconcile.
        }
        $sPaid->finish();
    }
    else {
        $sOnHold->execute( "No 'Approved' PA", $TrID )
          || myDBI->dberror("chkCAP: update OnHold NoPA ${TrID}");
        $overCAP = 1;    # don't reconcile.
        print qq|chkCAP: NOPA: ContDate=${ContDate}\n| if ($debug);
    }
    return ($overCAP);
}
############################################################################
